// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/labstack/echo/v4"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// PostActionsRunnerRegistrationJSONBody defines parameters for PostActionsRunnerRegistration.
type PostActionsRunnerRegistrationJSONBody struct {
	RunnerEvent *string `json:"runner_event,omitempty"`
	Url         *string `json:"url,omitempty"`
}

// PostActionsRunnerRegistrationJSONRequestBody defines body for PostActionsRunnerRegistration for application/json ContentType.
type PostActionsRunnerRegistrationJSONRequestBody PostActionsRunnerRegistrationJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostActionsRunnerRegistrationWithBody request with any body
	PostActionsRunnerRegistrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostActionsRunnerRegistration(ctx context.Context, body PostActionsRunnerRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostActionsRunnerRegistrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostActionsRunnerRegistrationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostActionsRunnerRegistration(ctx context.Context, body PostActionsRunnerRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostActionsRunnerRegistrationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostActionsRunnerRegistrationRequest calls the generic PostActionsRunnerRegistration builder with application/json body
func NewPostActionsRunnerRegistrationRequest(server string, body PostActionsRunnerRegistrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostActionsRunnerRegistrationRequestWithBody(server, "application/json", bodyReader)
}

// NewPostActionsRunnerRegistrationRequestWithBody generates requests for PostActionsRunnerRegistration with any type of body
func NewPostActionsRunnerRegistrationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/actions/runner-registration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostActionsRunnerRegistrationWithBodyWithResponse request with any body
	PostActionsRunnerRegistrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostActionsRunnerRegistrationResponse, error)

	PostActionsRunnerRegistrationWithResponse(ctx context.Context, body PostActionsRunnerRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostActionsRunnerRegistrationResponse, error)
}

type PostActionsRunnerRegistrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Token       *string `json:"token,omitempty"`
		TokenSchema *string `json:"token_schema,omitempty"`
		Url         *string `json:"url,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostActionsRunnerRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostActionsRunnerRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostActionsRunnerRegistrationWithBodyWithResponse request with arbitrary body returning *PostActionsRunnerRegistrationResponse
func (c *ClientWithResponses) PostActionsRunnerRegistrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostActionsRunnerRegistrationResponse, error) {
	rsp, err := c.PostActionsRunnerRegistrationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostActionsRunnerRegistrationResponse(rsp)
}

func (c *ClientWithResponses) PostActionsRunnerRegistrationWithResponse(ctx context.Context, body PostActionsRunnerRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostActionsRunnerRegistrationResponse, error) {
	rsp, err := c.PostActionsRunnerRegistration(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostActionsRunnerRegistrationResponse(rsp)
}

// ParsePostActionsRunnerRegistrationResponse parses an HTTP response from a PostActionsRunnerRegistrationWithResponse call
func ParsePostActionsRunnerRegistrationResponse(rsp *http.Response) (*PostActionsRunnerRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostActionsRunnerRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Token       *string `json:"token,omitempty"`
			TokenSchema *string `json:"token_schema,omitempty"`
			Url         *string `json:"url,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /actions/runner-registration)
	PostActionsRunnerRegistration(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostActionsRunnerRegistration converts echo context to params.
func (w *ServerInterfaceWrapper) PostActionsRunnerRegistration(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostActionsRunnerRegistration(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/actions/runner-registration", wrapper.PostActionsRunnerRegistration)

}

type PostActionsRunnerRegistrationRequestObject struct {
	Body *PostActionsRunnerRegistrationJSONRequestBody
}

type PostActionsRunnerRegistrationResponseObject interface {
	VisitPostActionsRunnerRegistrationResponse(w http.ResponseWriter) error
}

type PostActionsRunnerRegistration200JSONResponse struct {
	Token       *string `json:"token,omitempty"`
	TokenSchema *string `json:"token_schema,omitempty"`
	Url         *string `json:"url,omitempty"`
}

func (response PostActionsRunnerRegistration200JSONResponse) VisitPostActionsRunnerRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /actions/runner-registration)
	PostActionsRunnerRegistration(ctx context.Context, request PostActionsRunnerRegistrationRequestObject) (PostActionsRunnerRegistrationResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostActionsRunnerRegistration operation middleware
func (sh *strictHandler) PostActionsRunnerRegistration(ctx echo.Context) error {
	var request PostActionsRunnerRegistrationRequestObject

	var body PostActionsRunnerRegistrationJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostActionsRunnerRegistration(ctx.Request().Context(), request.(PostActionsRunnerRegistrationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostActionsRunnerRegistration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostActionsRunnerRegistrationResponseObject); ok {
		return validResponse.VisitPostActionsRunnerRegistrationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
