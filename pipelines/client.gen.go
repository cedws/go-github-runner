// Package pipelines provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package pipelines

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// GetTenantIdApisConnectionDataParams defines parameters for GetTenantIdApisConnectionData.
type GetTenantIdApisConnectionDataParams struct {
	ConnectOptions *float32 `form:"connectOptions,omitempty" json:"connectOptions,omitempty"`
	LastChangeId   *string  `form:"lastChangeId,omitempty" json:"lastChangeId,omitempty"`
	LastChangeId64 *string  `form:"lastChangeId64,omitempty" json:"lastChangeId64,omitempty"`
}

// GetTenantIdApisDistributedtaskPoolsParams defines parameters for GetTenantIdApisDistributedtaskPools.
type GetTenantIdApisDistributedtaskPoolsParams struct {
	PoolType *string `form:"poolType,omitempty" json:"poolType,omitempty"`
}

// GetTenantIdApisDistributedtaskPoolsIdAgentsParams defines parameters for GetTenantIdApisDistributedtaskPoolsIdAgents.
type GetTenantIdApisDistributedtaskPoolsIdAgentsParams struct {
	AgentName           *string `form:"agentName,omitempty" json:"agentName,omitempty"`
	IncludeCapabilities *string `form:"includeCapabilities,omitempty" json:"includeCapabilities,omitempty"`
}

// PostTenantIdApisDistributedtaskPoolsIdAgentsJSONBody defines parameters for PostTenantIdApisDistributedtaskPoolsIdAgents.
type PostTenantIdApisDistributedtaskPoolsIdAgentsJSONBody struct {
	Authorization *struct {
		PublicKey *struct {
			Exponent *string `json:"exponent,omitempty"`
			Modulus  *string `json:"modulus,omitempty"`
		} `json:"publicKey,omitempty"`
	} `json:"authorization,omitempty"`
	CreatedOn     *string  `json:"createdOn,omitempty"`
	DisableUpdate *bool    `json:"disableUpdate,omitempty"`
	Ephemeral     *bool    `json:"ephemeral,omitempty"`
	Id            *float32 `json:"id,omitempty"`
	Labels        *[]struct {
		Id   *float32 `json:"id,omitempty"`
		Name *string  `json:"name,omitempty"`
		Type *string  `json:"type,omitempty"`
	} `json:"labels,omitempty"`
	MaxParallelism    *float32 `json:"maxParallelism,omitempty"`
	Name              *string  `json:"name,omitempty"`
	OsDescription     *string  `json:"osDescription,omitempty"`
	ProvisioningState *string  `json:"provisioningState,omitempty"`
	Status            *float32 `json:"status,omitempty"`
	Version           *string  `json:"version,omitempty"`
}

// PostTenantIdApisDistributedtaskPoolsIdSessionsJSONBody defines parameters for PostTenantIdApisDistributedtaskPoolsIdSessions.
type PostTenantIdApisDistributedtaskPoolsIdSessionsJSONBody struct {
	Agent *struct {
		Ephemeral         *map[string]interface{} `json:"ephemeral"`
		Id                *float32                `json:"id,omitempty"`
		Name              *string                 `json:"name,omitempty"`
		OsDescription     *string                 `json:"osDescription,omitempty"`
		ProvisioningState *map[string]interface{} `json:"provisioningState"`
		Status            *float32                `json:"status,omitempty"`
		Version           *string                 `json:"version,omitempty"`
	} `json:"agent,omitempty"`
	OwnerName         *string `json:"ownerName,omitempty"`
	SessionId         *string `json:"sessionId,omitempty"`
	UseFipsEncryption *bool   `json:"useFipsEncryption,omitempty"`
}

// PostTenantIdApisDistributedtaskPoolsIdAgentsJSONRequestBody defines body for PostTenantIdApisDistributedtaskPoolsIdAgents for application/json ContentType.
type PostTenantIdApisDistributedtaskPoolsIdAgentsJSONRequestBody PostTenantIdApisDistributedtaskPoolsIdAgentsJSONBody

// PostTenantIdApisDistributedtaskPoolsIdSessionsJSONRequestBody defines body for PostTenantIdApisDistributedtaskPoolsIdSessions for application/json ContentType.
type PostTenantIdApisDistributedtaskPoolsIdSessionsJSONRequestBody PostTenantIdApisDistributedtaskPoolsIdSessionsJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetTenantIdApisConnectionData request
	GetTenantIdApisConnectionData(ctx context.Context, tenantId string, params *GetTenantIdApisConnectionDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTenantIdApisDistributedtaskPools request
	GetTenantIdApisDistributedtaskPools(ctx context.Context, tenantId string, params *GetTenantIdApisDistributedtaskPoolsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTenantIdApisDistributedtaskPoolsIdAgents request
	GetTenantIdApisDistributedtaskPoolsIdAgents(ctx context.Context, tenantId string, id string, params *GetTenantIdApisDistributedtaskPoolsIdAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTenantIdApisDistributedtaskPoolsIdAgentsWithBody request with any body
	PostTenantIdApisDistributedtaskPoolsIdAgentsWithBody(ctx context.Context, tenantId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTenantIdApisDistributedtaskPoolsIdAgents(ctx context.Context, tenantId string, id string, body PostTenantIdApisDistributedtaskPoolsIdAgentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTenantIdApisDistributedtaskPoolsIdSessionsWithBody request with any body
	PostTenantIdApisDistributedtaskPoolsIdSessionsWithBody(ctx context.Context, tenantId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTenantIdApisDistributedtaskPoolsIdSessions(ctx context.Context, tenantId string, id string, body PostTenantIdApisDistributedtaskPoolsIdSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetTenantIdApisConnectionData(ctx context.Context, tenantId string, params *GetTenantIdApisConnectionDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTenantIdApisConnectionDataRequest(c.Server, tenantId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTenantIdApisDistributedtaskPools(ctx context.Context, tenantId string, params *GetTenantIdApisDistributedtaskPoolsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTenantIdApisDistributedtaskPoolsRequest(c.Server, tenantId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTenantIdApisDistributedtaskPoolsIdAgents(ctx context.Context, tenantId string, id string, params *GetTenantIdApisDistributedtaskPoolsIdAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTenantIdApisDistributedtaskPoolsIdAgentsRequest(c.Server, tenantId, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTenantIdApisDistributedtaskPoolsIdAgentsWithBody(ctx context.Context, tenantId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTenantIdApisDistributedtaskPoolsIdAgentsRequestWithBody(c.Server, tenantId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTenantIdApisDistributedtaskPoolsIdAgents(ctx context.Context, tenantId string, id string, body PostTenantIdApisDistributedtaskPoolsIdAgentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTenantIdApisDistributedtaskPoolsIdAgentsRequest(c.Server, tenantId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTenantIdApisDistributedtaskPoolsIdSessionsWithBody(ctx context.Context, tenantId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTenantIdApisDistributedtaskPoolsIdSessionsRequestWithBody(c.Server, tenantId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTenantIdApisDistributedtaskPoolsIdSessions(ctx context.Context, tenantId string, id string, body PostTenantIdApisDistributedtaskPoolsIdSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTenantIdApisDistributedtaskPoolsIdSessionsRequest(c.Server, tenantId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetTenantIdApisConnectionDataRequest generates requests for GetTenantIdApisConnectionData
func NewGetTenantIdApisConnectionDataRequest(server string, tenantId string, params *GetTenantIdApisConnectionDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/_apis/connectionData", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ConnectOptions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "connectOptions", runtime.ParamLocationQuery, *params.ConnectOptions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastChangeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastChangeId", runtime.ParamLocationQuery, *params.LastChangeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastChangeId64 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastChangeId64", runtime.ParamLocationQuery, *params.LastChangeId64); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTenantIdApisDistributedtaskPoolsRequest generates requests for GetTenantIdApisDistributedtaskPools
func NewGetTenantIdApisDistributedtaskPoolsRequest(server string, tenantId string, params *GetTenantIdApisDistributedtaskPoolsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/_apis/distributedtask/pools", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PoolType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "poolType", runtime.ParamLocationQuery, *params.PoolType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTenantIdApisDistributedtaskPoolsIdAgentsRequest generates requests for GetTenantIdApisDistributedtaskPoolsIdAgents
func NewGetTenantIdApisDistributedtaskPoolsIdAgentsRequest(server string, tenantId string, id string, params *GetTenantIdApisDistributedtaskPoolsIdAgentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/_apis/distributedtask/pools/%s/agents", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AgentName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agentName", runtime.ParamLocationQuery, *params.AgentName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeCapabilities != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeCapabilities", runtime.ParamLocationQuery, *params.IncludeCapabilities); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTenantIdApisDistributedtaskPoolsIdAgentsRequest calls the generic PostTenantIdApisDistributedtaskPoolsIdAgents builder with application/json body
func NewPostTenantIdApisDistributedtaskPoolsIdAgentsRequest(server string, tenantId string, id string, body PostTenantIdApisDistributedtaskPoolsIdAgentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTenantIdApisDistributedtaskPoolsIdAgentsRequestWithBody(server, tenantId, id, "application/json", bodyReader)
}

// NewPostTenantIdApisDistributedtaskPoolsIdAgentsRequestWithBody generates requests for PostTenantIdApisDistributedtaskPoolsIdAgents with any type of body
func NewPostTenantIdApisDistributedtaskPoolsIdAgentsRequestWithBody(server string, tenantId string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/_apis/distributedtask/pools/%s/agents", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTenantIdApisDistributedtaskPoolsIdSessionsRequest calls the generic PostTenantIdApisDistributedtaskPoolsIdSessions builder with application/json body
func NewPostTenantIdApisDistributedtaskPoolsIdSessionsRequest(server string, tenantId string, id string, body PostTenantIdApisDistributedtaskPoolsIdSessionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTenantIdApisDistributedtaskPoolsIdSessionsRequestWithBody(server, tenantId, id, "application/json", bodyReader)
}

// NewPostTenantIdApisDistributedtaskPoolsIdSessionsRequestWithBody generates requests for PostTenantIdApisDistributedtaskPoolsIdSessions with any type of body
func NewPostTenantIdApisDistributedtaskPoolsIdSessionsRequestWithBody(server string, tenantId string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/_apis/distributedtask/pools/%s/sessions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetTenantIdApisConnectionDataWithResponse request
	GetTenantIdApisConnectionDataWithResponse(ctx context.Context, tenantId string, params *GetTenantIdApisConnectionDataParams, reqEditors ...RequestEditorFn) (*GetTenantIdApisConnectionDataResponse, error)

	// GetTenantIdApisDistributedtaskPoolsWithResponse request
	GetTenantIdApisDistributedtaskPoolsWithResponse(ctx context.Context, tenantId string, params *GetTenantIdApisDistributedtaskPoolsParams, reqEditors ...RequestEditorFn) (*GetTenantIdApisDistributedtaskPoolsResponse, error)

	// GetTenantIdApisDistributedtaskPoolsIdAgentsWithResponse request
	GetTenantIdApisDistributedtaskPoolsIdAgentsWithResponse(ctx context.Context, tenantId string, id string, params *GetTenantIdApisDistributedtaskPoolsIdAgentsParams, reqEditors ...RequestEditorFn) (*GetTenantIdApisDistributedtaskPoolsIdAgentsResponse, error)

	// PostTenantIdApisDistributedtaskPoolsIdAgentsWithBodyWithResponse request with any body
	PostTenantIdApisDistributedtaskPoolsIdAgentsWithBodyWithResponse(ctx context.Context, tenantId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTenantIdApisDistributedtaskPoolsIdAgentsResponse, error)

	PostTenantIdApisDistributedtaskPoolsIdAgentsWithResponse(ctx context.Context, tenantId string, id string, body PostTenantIdApisDistributedtaskPoolsIdAgentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTenantIdApisDistributedtaskPoolsIdAgentsResponse, error)

	// PostTenantIdApisDistributedtaskPoolsIdSessionsWithBodyWithResponse request with any body
	PostTenantIdApisDistributedtaskPoolsIdSessionsWithBodyWithResponse(ctx context.Context, tenantId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTenantIdApisDistributedtaskPoolsIdSessionsResponse, error)

	PostTenantIdApisDistributedtaskPoolsIdSessionsWithResponse(ctx context.Context, tenantId string, id string, body PostTenantIdApisDistributedtaskPoolsIdSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTenantIdApisDistributedtaskPoolsIdSessionsResponse, error)
}

type GetTenantIdApisConnectionDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DeploymentId        *string `json:"deploymentId,omitempty"`
		DeploymentType      *string `json:"deploymentType,omitempty"`
		InstanceId          *string `json:"instanceId,omitempty"`
		LocationServiceData *struct {
			AccessMappings *[]struct {
				AccessPoint  *string `json:"accessPoint,omitempty"`
				DisplayName  *string `json:"displayName,omitempty"`
				Moniker      *string `json:"moniker,omitempty"`
				ServiceOwner *string `json:"serviceOwner,omitempty"`
			} `json:"accessMappings,omitempty"`
			DefaultAccessMappingMoniker *string  `json:"defaultAccessMappingMoniker,omitempty"`
			LastChangeId                *float32 `json:"lastChangeId,omitempty"`
			LastChangeId64              *float32 `json:"lastChangeId64,omitempty"`
			ServiceDefinitions          *[]struct {
				Description       *string                 `json:"description,omitempty"`
				DisplayName       *string                 `json:"displayName,omitempty"`
				Identifier        *string                 `json:"identifier,omitempty"`
				LocationMappings  *[]interface{}          `json:"locationMappings,omitempty"`
				ParentIdentifier  *string                 `json:"parentIdentifier,omitempty"`
				ParentServiceType *string                 `json:"parentServiceType,omitempty"`
				Properties        *map[string]interface{} `json:"properties,omitempty"`
				RelativeToSetting *string                 `json:"relativeToSetting,omitempty"`
				ServiceOwner      *string                 `json:"serviceOwner,omitempty"`
				ServiceType       *string                 `json:"serviceType,omitempty"`
				ToolId            *string                 `json:"toolId,omitempty"`
			} `json:"serviceDefinitions,omitempty"`
			ServiceOwner *string `json:"serviceOwner,omitempty"`
		} `json:"locationServiceData,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTenantIdApisConnectionDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTenantIdApisConnectionDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTenantIdApisDistributedtaskPoolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count *float32 `json:"count,omitempty"`
		Value *[]struct {
			AgentCloudId *map[string]interface{} `json:"agentCloudId"`
			AutoSize     *bool                   `json:"autoSize,omitempty"`
			CreatedOn    *string                 `json:"createdOn,omitempty"`
			Id           *float32                `json:"id,omitempty"`
			IsHosted     *bool                   `json:"isHosted,omitempty"`
			IsInternal   *bool                   `json:"isInternal,omitempty"`
			Name         *string                 `json:"name,omitempty"`
			Scope        *string                 `json:"scope,omitempty"`
			Size         *float32                `json:"size,omitempty"`
			TargetSize   *map[string]interface{} `json:"targetSize"`
		} `json:"value,omitempty"`
	}
	JSON401 *struct {
		Id             *string                 `json:"$id,omitempty"`
		ErrorCode      *float32                `json:"errorCode,omitempty"`
		EventId        *float32                `json:"eventId,omitempty"`
		InnerException *map[string]interface{} `json:"innerException"`
		Message        *string                 `json:"message,omitempty"`
		TypeKey        *string                 `json:"typeKey,omitempty"`
		TypeName       *string                 `json:"typeName,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTenantIdApisDistributedtaskPoolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTenantIdApisDistributedtaskPoolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTenantIdApisDistributedtaskPoolsIdAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count *float32       `json:"count,omitempty"`
		Value *[]interface{} `json:"value,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTenantIdApisDistributedtaskPoolsIdAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTenantIdApisDistributedtaskPoolsIdAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTenantIdApisDistributedtaskPoolsIdAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Authorization *struct {
			AuthorizationUrl *string `json:"authorizationUrl,omitempty"`
			ClientId         *string `json:"clientId,omitempty"`
			PublicKey        *struct {
				Exponent *string `json:"exponent,omitempty"`
				Modulus  *string `json:"modulus,omitempty"`
			} `json:"publicKey,omitempty"`
		} `json:"authorization,omitempty"`
		CreatedOn          *string  `json:"createdOn,omitempty"`
		CurrentParallelism *float32 `json:"currentParallelism,omitempty"`
		DisableUpdate      *bool    `json:"disableUpdate,omitempty"`
		Enabled            *bool    `json:"enabled,omitempty"`
		Ephemeral          *bool    `json:"ephemeral,omitempty"`
		Id                 *float32 `json:"id,omitempty"`
		IsElastic          *bool    `json:"isElastic,omitempty"`
		IsVirtual          *bool    `json:"isVirtual,omitempty"`
		Labels             *[]struct {
			Id   *float32 `json:"id,omitempty"`
			Name *string  `json:"name,omitempty"`
			Type *string  `json:"type,omitempty"`
		} `json:"labels,omitempty"`
		MaxParallelism *float32                `json:"maxParallelism,omitempty"`
		Name           *string                 `json:"name,omitempty"`
		OsDescription  *string                 `json:"osDescription,omitempty"`
		OwningTenant   *map[string]interface{} `json:"owningTenant"`
		Properties     *struct {
			RequireFipsCryptography *struct {
				Type  *string `json:"$type,omitempty"`
				Value *bool   `json:"$value,omitempty"`
			} `json:"RequireFipsCryptography,omitempty"`
			ServerUrl *struct {
				Type  *string `json:"$type,omitempty"`
				Value *string `json:"$value,omitempty"`
			} `json:"ServerUrl,omitempty"`
		} `json:"properties,omitempty"`
		ProvisioningState *string                 `json:"provisioningState,omitempty"`
		QueueName         *string                 `json:"queueName,omitempty"`
		RunnerGroupId     *float32                `json:"runnerGroupId,omitempty"`
		RunnerGroupName   *map[string]interface{} `json:"runnerGroupName"`
		Status            *string                 `json:"status,omitempty"`
		Version           *string                 `json:"version,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostTenantIdApisDistributedtaskPoolsIdAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTenantIdApisDistributedtaskPoolsIdAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTenantIdApisDistributedtaskPoolsIdSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Agent *struct {
			Ephemeral         *map[string]interface{} `json:"ephemeral"`
			Id                *float32                `json:"id,omitempty"`
			IsVirtual         *bool                   `json:"isVirtual,omitempty"`
			Name              *string                 `json:"name,omitempty"`
			OsDescription     *string                 `json:"osDescription,omitempty"`
			OwningTenant      *map[string]interface{} `json:"owningTenant"`
			ProvisioningState *map[string]interface{} `json:"provisioningState"`
			RunnerGroupId     *map[string]interface{} `json:"runnerGroupId"`
			RunnerGroupName   *map[string]interface{} `json:"runnerGroupName"`
			Status            *float32                `json:"status,omitempty"`
			Version           *string                 `json:"version,omitempty"`
		} `json:"agent,omitempty"`
		EncryptionKey *struct {
			Encrypted *bool   `json:"encrypted,omitempty"`
			Value     *string `json:"value,omitempty"`
		} `json:"encryptionKey,omitempty"`
		OwnerName         *string `json:"ownerName,omitempty"`
		SessionId         *string `json:"sessionId,omitempty"`
		UseFipsEncryption *bool   `json:"useFipsEncryption,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostTenantIdApisDistributedtaskPoolsIdSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTenantIdApisDistributedtaskPoolsIdSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetTenantIdApisConnectionDataWithResponse request returning *GetTenantIdApisConnectionDataResponse
func (c *ClientWithResponses) GetTenantIdApisConnectionDataWithResponse(ctx context.Context, tenantId string, params *GetTenantIdApisConnectionDataParams, reqEditors ...RequestEditorFn) (*GetTenantIdApisConnectionDataResponse, error) {
	rsp, err := c.GetTenantIdApisConnectionData(ctx, tenantId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTenantIdApisConnectionDataResponse(rsp)
}

// GetTenantIdApisDistributedtaskPoolsWithResponse request returning *GetTenantIdApisDistributedtaskPoolsResponse
func (c *ClientWithResponses) GetTenantIdApisDistributedtaskPoolsWithResponse(ctx context.Context, tenantId string, params *GetTenantIdApisDistributedtaskPoolsParams, reqEditors ...RequestEditorFn) (*GetTenantIdApisDistributedtaskPoolsResponse, error) {
	rsp, err := c.GetTenantIdApisDistributedtaskPools(ctx, tenantId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTenantIdApisDistributedtaskPoolsResponse(rsp)
}

// GetTenantIdApisDistributedtaskPoolsIdAgentsWithResponse request returning *GetTenantIdApisDistributedtaskPoolsIdAgentsResponse
func (c *ClientWithResponses) GetTenantIdApisDistributedtaskPoolsIdAgentsWithResponse(ctx context.Context, tenantId string, id string, params *GetTenantIdApisDistributedtaskPoolsIdAgentsParams, reqEditors ...RequestEditorFn) (*GetTenantIdApisDistributedtaskPoolsIdAgentsResponse, error) {
	rsp, err := c.GetTenantIdApisDistributedtaskPoolsIdAgents(ctx, tenantId, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTenantIdApisDistributedtaskPoolsIdAgentsResponse(rsp)
}

// PostTenantIdApisDistributedtaskPoolsIdAgentsWithBodyWithResponse request with arbitrary body returning *PostTenantIdApisDistributedtaskPoolsIdAgentsResponse
func (c *ClientWithResponses) PostTenantIdApisDistributedtaskPoolsIdAgentsWithBodyWithResponse(ctx context.Context, tenantId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTenantIdApisDistributedtaskPoolsIdAgentsResponse, error) {
	rsp, err := c.PostTenantIdApisDistributedtaskPoolsIdAgentsWithBody(ctx, tenantId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTenantIdApisDistributedtaskPoolsIdAgentsResponse(rsp)
}

func (c *ClientWithResponses) PostTenantIdApisDistributedtaskPoolsIdAgentsWithResponse(ctx context.Context, tenantId string, id string, body PostTenantIdApisDistributedtaskPoolsIdAgentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTenantIdApisDistributedtaskPoolsIdAgentsResponse, error) {
	rsp, err := c.PostTenantIdApisDistributedtaskPoolsIdAgents(ctx, tenantId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTenantIdApisDistributedtaskPoolsIdAgentsResponse(rsp)
}

// PostTenantIdApisDistributedtaskPoolsIdSessionsWithBodyWithResponse request with arbitrary body returning *PostTenantIdApisDistributedtaskPoolsIdSessionsResponse
func (c *ClientWithResponses) PostTenantIdApisDistributedtaskPoolsIdSessionsWithBodyWithResponse(ctx context.Context, tenantId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTenantIdApisDistributedtaskPoolsIdSessionsResponse, error) {
	rsp, err := c.PostTenantIdApisDistributedtaskPoolsIdSessionsWithBody(ctx, tenantId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTenantIdApisDistributedtaskPoolsIdSessionsResponse(rsp)
}

func (c *ClientWithResponses) PostTenantIdApisDistributedtaskPoolsIdSessionsWithResponse(ctx context.Context, tenantId string, id string, body PostTenantIdApisDistributedtaskPoolsIdSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTenantIdApisDistributedtaskPoolsIdSessionsResponse, error) {
	rsp, err := c.PostTenantIdApisDistributedtaskPoolsIdSessions(ctx, tenantId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTenantIdApisDistributedtaskPoolsIdSessionsResponse(rsp)
}

// ParseGetTenantIdApisConnectionDataResponse parses an HTTP response from a GetTenantIdApisConnectionDataWithResponse call
func ParseGetTenantIdApisConnectionDataResponse(rsp *http.Response) (*GetTenantIdApisConnectionDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTenantIdApisConnectionDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DeploymentId        *string `json:"deploymentId,omitempty"`
			DeploymentType      *string `json:"deploymentType,omitempty"`
			InstanceId          *string `json:"instanceId,omitempty"`
			LocationServiceData *struct {
				AccessMappings *[]struct {
					AccessPoint  *string `json:"accessPoint,omitempty"`
					DisplayName  *string `json:"displayName,omitempty"`
					Moniker      *string `json:"moniker,omitempty"`
					ServiceOwner *string `json:"serviceOwner,omitempty"`
				} `json:"accessMappings,omitempty"`
				DefaultAccessMappingMoniker *string  `json:"defaultAccessMappingMoniker,omitempty"`
				LastChangeId                *float32 `json:"lastChangeId,omitempty"`
				LastChangeId64              *float32 `json:"lastChangeId64,omitempty"`
				ServiceDefinitions          *[]struct {
					Description       *string                 `json:"description,omitempty"`
					DisplayName       *string                 `json:"displayName,omitempty"`
					Identifier        *string                 `json:"identifier,omitempty"`
					LocationMappings  *[]interface{}          `json:"locationMappings,omitempty"`
					ParentIdentifier  *string                 `json:"parentIdentifier,omitempty"`
					ParentServiceType *string                 `json:"parentServiceType,omitempty"`
					Properties        *map[string]interface{} `json:"properties,omitempty"`
					RelativeToSetting *string                 `json:"relativeToSetting,omitempty"`
					ServiceOwner      *string                 `json:"serviceOwner,omitempty"`
					ServiceType       *string                 `json:"serviceType,omitempty"`
					ToolId            *string                 `json:"toolId,omitempty"`
				} `json:"serviceDefinitions,omitempty"`
				ServiceOwner *string `json:"serviceOwner,omitempty"`
			} `json:"locationServiceData,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTenantIdApisDistributedtaskPoolsResponse parses an HTTP response from a GetTenantIdApisDistributedtaskPoolsWithResponse call
func ParseGetTenantIdApisDistributedtaskPoolsResponse(rsp *http.Response) (*GetTenantIdApisDistributedtaskPoolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTenantIdApisDistributedtaskPoolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count *float32 `json:"count,omitempty"`
			Value *[]struct {
				AgentCloudId *map[string]interface{} `json:"agentCloudId"`
				AutoSize     *bool                   `json:"autoSize,omitempty"`
				CreatedOn    *string                 `json:"createdOn,omitempty"`
				Id           *float32                `json:"id,omitempty"`
				IsHosted     *bool                   `json:"isHosted,omitempty"`
				IsInternal   *bool                   `json:"isInternal,omitempty"`
				Name         *string                 `json:"name,omitempty"`
				Scope        *string                 `json:"scope,omitempty"`
				Size         *float32                `json:"size,omitempty"`
				TargetSize   *map[string]interface{} `json:"targetSize"`
			} `json:"value,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id             *string                 `json:"$id,omitempty"`
			ErrorCode      *float32                `json:"errorCode,omitempty"`
			EventId        *float32                `json:"eventId,omitempty"`
			InnerException *map[string]interface{} `json:"innerException"`
			Message        *string                 `json:"message,omitempty"`
			TypeKey        *string                 `json:"typeKey,omitempty"`
			TypeName       *string                 `json:"typeName,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetTenantIdApisDistributedtaskPoolsIdAgentsResponse parses an HTTP response from a GetTenantIdApisDistributedtaskPoolsIdAgentsWithResponse call
func ParseGetTenantIdApisDistributedtaskPoolsIdAgentsResponse(rsp *http.Response) (*GetTenantIdApisDistributedtaskPoolsIdAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTenantIdApisDistributedtaskPoolsIdAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count *float32       `json:"count,omitempty"`
			Value *[]interface{} `json:"value,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTenantIdApisDistributedtaskPoolsIdAgentsResponse parses an HTTP response from a PostTenantIdApisDistributedtaskPoolsIdAgentsWithResponse call
func ParsePostTenantIdApisDistributedtaskPoolsIdAgentsResponse(rsp *http.Response) (*PostTenantIdApisDistributedtaskPoolsIdAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTenantIdApisDistributedtaskPoolsIdAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Authorization *struct {
				AuthorizationUrl *string `json:"authorizationUrl,omitempty"`
				ClientId         *string `json:"clientId,omitempty"`
				PublicKey        *struct {
					Exponent *string `json:"exponent,omitempty"`
					Modulus  *string `json:"modulus,omitempty"`
				} `json:"publicKey,omitempty"`
			} `json:"authorization,omitempty"`
			CreatedOn          *string  `json:"createdOn,omitempty"`
			CurrentParallelism *float32 `json:"currentParallelism,omitempty"`
			DisableUpdate      *bool    `json:"disableUpdate,omitempty"`
			Enabled            *bool    `json:"enabled,omitempty"`
			Ephemeral          *bool    `json:"ephemeral,omitempty"`
			Id                 *float32 `json:"id,omitempty"`
			IsElastic          *bool    `json:"isElastic,omitempty"`
			IsVirtual          *bool    `json:"isVirtual,omitempty"`
			Labels             *[]struct {
				Id   *float32 `json:"id,omitempty"`
				Name *string  `json:"name,omitempty"`
				Type *string  `json:"type,omitempty"`
			} `json:"labels,omitempty"`
			MaxParallelism *float32                `json:"maxParallelism,omitempty"`
			Name           *string                 `json:"name,omitempty"`
			OsDescription  *string                 `json:"osDescription,omitempty"`
			OwningTenant   *map[string]interface{} `json:"owningTenant"`
			Properties     *struct {
				RequireFipsCryptography *struct {
					Type  *string `json:"$type,omitempty"`
					Value *bool   `json:"$value,omitempty"`
				} `json:"RequireFipsCryptography,omitempty"`
				ServerUrl *struct {
					Type  *string `json:"$type,omitempty"`
					Value *string `json:"$value,omitempty"`
				} `json:"ServerUrl,omitempty"`
			} `json:"properties,omitempty"`
			ProvisioningState *string                 `json:"provisioningState,omitempty"`
			QueueName         *string                 `json:"queueName,omitempty"`
			RunnerGroupId     *float32                `json:"runnerGroupId,omitempty"`
			RunnerGroupName   *map[string]interface{} `json:"runnerGroupName"`
			Status            *string                 `json:"status,omitempty"`
			Version           *string                 `json:"version,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTenantIdApisDistributedtaskPoolsIdSessionsResponse parses an HTTP response from a PostTenantIdApisDistributedtaskPoolsIdSessionsWithResponse call
func ParsePostTenantIdApisDistributedtaskPoolsIdSessionsResponse(rsp *http.Response) (*PostTenantIdApisDistributedtaskPoolsIdSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTenantIdApisDistributedtaskPoolsIdSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Agent *struct {
				Ephemeral         *map[string]interface{} `json:"ephemeral"`
				Id                *float32                `json:"id,omitempty"`
				IsVirtual         *bool                   `json:"isVirtual,omitempty"`
				Name              *string                 `json:"name,omitempty"`
				OsDescription     *string                 `json:"osDescription,omitempty"`
				OwningTenant      *map[string]interface{} `json:"owningTenant"`
				ProvisioningState *map[string]interface{} `json:"provisioningState"`
				RunnerGroupId     *map[string]interface{} `json:"runnerGroupId"`
				RunnerGroupName   *map[string]interface{} `json:"runnerGroupName"`
				Status            *float32                `json:"status,omitempty"`
				Version           *string                 `json:"version,omitempty"`
			} `json:"agent,omitempty"`
			EncryptionKey *struct {
				Encrypted *bool   `json:"encrypted,omitempty"`
				Value     *string `json:"value,omitempty"`
			} `json:"encryptionKey,omitempty"`
			OwnerName         *string `json:"ownerName,omitempty"`
			SessionId         *string `json:"sessionId,omitempty"`
			UseFipsEncryption *bool   `json:"useFipsEncryption,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
