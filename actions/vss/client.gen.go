// Package vss provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package vss

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// TenantId defines model for tenantId.
type TenantId = string

// GetTenantIdApisConnectionDataParams defines parameters for GetTenantIdApisConnectionData.
type GetTenantIdApisConnectionDataParams struct {
	ConnectOptions *float32 `form:"connectOptions,omitempty" json:"connectOptions,omitempty"`
	LastChangeId   *string  `form:"lastChangeId,omitempty" json:"lastChangeId,omitempty"`
	LastChangeId64 *string  `form:"lastChangeId64,omitempty" json:"lastChangeId64,omitempty"`
}

// GetTenantIdApisDistributedtaskPoolsParams defines parameters for GetTenantIdApisDistributedtaskPools.
type GetTenantIdApisDistributedtaskPoolsParams struct {
	PoolType *string `form:"poolType,omitempty" json:"poolType,omitempty"`
}

// GetTenantIdApisDistributedtaskPoolsIdAgentsParams defines parameters for GetTenantIdApisDistributedtaskPoolsIdAgents.
type GetTenantIdApisDistributedtaskPoolsIdAgentsParams struct {
	AgentName           *string `form:"agentName,omitempty" json:"agentName,omitempty"`
	IncludeCapabilities *string `form:"includeCapabilities,omitempty" json:"includeCapabilities,omitempty"`
}

// PostTenantIdApisDistributedtaskPoolsIdAgentsJSONBody defines parameters for PostTenantIdApisDistributedtaskPoolsIdAgents.
type PostTenantIdApisDistributedtaskPoolsIdAgentsJSONBody struct {
	Authorization *struct {
		PublicKey *struct {
			Exponent *string `json:"exponent,omitempty"`
			Modulus  *string `json:"modulus,omitempty"`
		} `json:"publicKey,omitempty"`
	} `json:"authorization,omitempty"`
	CreatedOn     *string  `json:"createdOn,omitempty"`
	DisableUpdate *bool    `json:"disableUpdate,omitempty"`
	Ephemeral     *bool    `json:"ephemeral,omitempty"`
	Id            *float32 `json:"id,omitempty"`
	Labels        *[]struct {
		Id   *float32 `json:"id,omitempty"`
		Name *string  `json:"name,omitempty"`
		Type *string  `json:"type,omitempty"`
	} `json:"labels,omitempty"`
	MaxParallelism    *float32 `json:"maxParallelism,omitempty"`
	Name              *string  `json:"name,omitempty"`
	OsDescription     *string  `json:"osDescription,omitempty"`
	ProvisioningState *string  `json:"provisioningState,omitempty"`
	Status            *float32 `json:"status,omitempty"`
	Version           *string  `json:"version,omitempty"`
}

// GetTenantIdApisDistributedtaskPoolsIdMessagesParams defines parameters for GetTenantIdApisDistributedtaskPoolsIdMessages.
type GetTenantIdApisDistributedtaskPoolsIdMessagesParams struct {
	SessionId     *string `form:"sessionId,omitempty" json:"sessionId,omitempty"`
	Status        *string `form:"status,omitempty" json:"status,omitempty"`
	RunnerVersion *string `form:"runnerVersion,omitempty" json:"runnerVersion,omitempty"`
	Os            *string `form:"os,omitempty" json:"os,omitempty"`
	Architecture  *string `form:"architecture,omitempty" json:"architecture,omitempty"`
	DisableUpdate *string `form:"disableUpdate,omitempty" json:"disableUpdate,omitempty"`
}

// DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Params defines parameters for DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1.
type DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Params struct {
	SessionId *string `form:"sessionId,omitempty" json:"sessionId,omitempty"`
}

// PostTenantIdApisDistributedtaskPoolsIdSessionsJSONBody defines parameters for PostTenantIdApisDistributedtaskPoolsIdSessions.
type PostTenantIdApisDistributedtaskPoolsIdSessionsJSONBody struct {
	Agent *struct {
		Ephemeral         *map[string]interface{} `json:"ephemeral"`
		Id                *float32                `json:"id,omitempty"`
		Name              *string                 `json:"name,omitempty"`
		OsDescription     *string                 `json:"osDescription,omitempty"`
		ProvisioningState *map[string]interface{} `json:"provisioningState"`
		Status            *float32                `json:"status,omitempty"`
		Version           *string                 `json:"version,omitempty"`
	} `json:"agent,omitempty"`
	OwnerName         *string `json:"ownerName,omitempty"`
	SessionId         *string `json:"sessionId,omitempty"`
	UseFipsEncryption *bool   `json:"useFipsEncryption,omitempty"`
}

// PostTenantIdApisDistributedtaskPoolsIdAgentsJSONRequestBody defines body for PostTenantIdApisDistributedtaskPoolsIdAgents for application/json ContentType.
type PostTenantIdApisDistributedtaskPoolsIdAgentsJSONRequestBody PostTenantIdApisDistributedtaskPoolsIdAgentsJSONBody

// PostTenantIdApisDistributedtaskPoolsIdSessionsJSONRequestBody defines body for PostTenantIdApisDistributedtaskPoolsIdSessions for application/json ContentType.
type PostTenantIdApisDistributedtaskPoolsIdSessionsJSONRequestBody PostTenantIdApisDistributedtaskPoolsIdSessionsJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetTenantIdApisConnectionData request
	GetTenantIdApisConnectionData(ctx context.Context, tenantId TenantId, params *GetTenantIdApisConnectionDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTenantIdApisDistributedtaskPools request
	GetTenantIdApisDistributedtaskPools(ctx context.Context, tenantId TenantId, params *GetTenantIdApisDistributedtaskPoolsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTenantIdApisDistributedtaskPoolsIdAgents request
	GetTenantIdApisDistributedtaskPoolsIdAgents(ctx context.Context, tenantId TenantId, id string, params *GetTenantIdApisDistributedtaskPoolsIdAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTenantIdApisDistributedtaskPoolsIdAgentsWithBody request with any body
	PostTenantIdApisDistributedtaskPoolsIdAgentsWithBody(ctx context.Context, tenantId TenantId, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTenantIdApisDistributedtaskPoolsIdAgents(ctx context.Context, tenantId TenantId, id string, body PostTenantIdApisDistributedtaskPoolsIdAgentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTenantIdApisDistributedtaskPoolsIdMessages request
	GetTenantIdApisDistributedtaskPoolsIdMessages(ctx context.Context, tenantId TenantId, id string, params *GetTenantIdApisDistributedtaskPoolsIdMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1 request
	DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1(ctx context.Context, tenantId TenantId, id string, id1 string, params *DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTenantIdApisDistributedtaskPoolsIdSessionsWithBody request with any body
	PostTenantIdApisDistributedtaskPoolsIdSessionsWithBody(ctx context.Context, tenantId TenantId, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTenantIdApisDistributedtaskPoolsIdSessions(ctx context.Context, tenantId TenantId, id string, body PostTenantIdApisDistributedtaskPoolsIdSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionId request
	DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionId(ctx context.Context, tenantId TenantId, id string, sessionId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetTenantIdApisConnectionData(ctx context.Context, tenantId TenantId, params *GetTenantIdApisConnectionDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTenantIdApisConnectionDataRequest(c.Server, tenantId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTenantIdApisDistributedtaskPools(ctx context.Context, tenantId TenantId, params *GetTenantIdApisDistributedtaskPoolsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTenantIdApisDistributedtaskPoolsRequest(c.Server, tenantId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTenantIdApisDistributedtaskPoolsIdAgents(ctx context.Context, tenantId TenantId, id string, params *GetTenantIdApisDistributedtaskPoolsIdAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTenantIdApisDistributedtaskPoolsIdAgentsRequest(c.Server, tenantId, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTenantIdApisDistributedtaskPoolsIdAgentsWithBody(ctx context.Context, tenantId TenantId, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTenantIdApisDistributedtaskPoolsIdAgentsRequestWithBody(c.Server, tenantId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTenantIdApisDistributedtaskPoolsIdAgents(ctx context.Context, tenantId TenantId, id string, body PostTenantIdApisDistributedtaskPoolsIdAgentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTenantIdApisDistributedtaskPoolsIdAgentsRequest(c.Server, tenantId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTenantIdApisDistributedtaskPoolsIdMessages(ctx context.Context, tenantId TenantId, id string, params *GetTenantIdApisDistributedtaskPoolsIdMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTenantIdApisDistributedtaskPoolsIdMessagesRequest(c.Server, tenantId, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1(ctx context.Context, tenantId TenantId, id string, id1 string, params *DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Request(c.Server, tenantId, id, id1, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTenantIdApisDistributedtaskPoolsIdSessionsWithBody(ctx context.Context, tenantId TenantId, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTenantIdApisDistributedtaskPoolsIdSessionsRequestWithBody(c.Server, tenantId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTenantIdApisDistributedtaskPoolsIdSessions(ctx context.Context, tenantId TenantId, id string, body PostTenantIdApisDistributedtaskPoolsIdSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTenantIdApisDistributedtaskPoolsIdSessionsRequest(c.Server, tenantId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionId(ctx context.Context, tenantId TenantId, id string, sessionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdRequest(c.Server, tenantId, id, sessionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetTenantIdApisConnectionDataRequest generates requests for GetTenantIdApisConnectionData
func NewGetTenantIdApisConnectionDataRequest(server string, tenantId TenantId, params *GetTenantIdApisConnectionDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/_apis/connectionData", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ConnectOptions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "connectOptions", runtime.ParamLocationQuery, *params.ConnectOptions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastChangeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastChangeId", runtime.ParamLocationQuery, *params.LastChangeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastChangeId64 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastChangeId64", runtime.ParamLocationQuery, *params.LastChangeId64); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTenantIdApisDistributedtaskPoolsRequest generates requests for GetTenantIdApisDistributedtaskPools
func NewGetTenantIdApisDistributedtaskPoolsRequest(server string, tenantId TenantId, params *GetTenantIdApisDistributedtaskPoolsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/_apis/distributedtask/pools", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PoolType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "poolType", runtime.ParamLocationQuery, *params.PoolType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTenantIdApisDistributedtaskPoolsIdAgentsRequest generates requests for GetTenantIdApisDistributedtaskPoolsIdAgents
func NewGetTenantIdApisDistributedtaskPoolsIdAgentsRequest(server string, tenantId TenantId, id string, params *GetTenantIdApisDistributedtaskPoolsIdAgentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/_apis/distributedtask/pools/%s/agents", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AgentName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agentName", runtime.ParamLocationQuery, *params.AgentName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeCapabilities != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeCapabilities", runtime.ParamLocationQuery, *params.IncludeCapabilities); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTenantIdApisDistributedtaskPoolsIdAgentsRequest calls the generic PostTenantIdApisDistributedtaskPoolsIdAgents builder with application/json body
func NewPostTenantIdApisDistributedtaskPoolsIdAgentsRequest(server string, tenantId TenantId, id string, body PostTenantIdApisDistributedtaskPoolsIdAgentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTenantIdApisDistributedtaskPoolsIdAgentsRequestWithBody(server, tenantId, id, "application/json", bodyReader)
}

// NewPostTenantIdApisDistributedtaskPoolsIdAgentsRequestWithBody generates requests for PostTenantIdApisDistributedtaskPoolsIdAgents with any type of body
func NewPostTenantIdApisDistributedtaskPoolsIdAgentsRequestWithBody(server string, tenantId TenantId, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/_apis/distributedtask/pools/%s/agents", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTenantIdApisDistributedtaskPoolsIdMessagesRequest generates requests for GetTenantIdApisDistributedtaskPoolsIdMessages
func NewGetTenantIdApisDistributedtaskPoolsIdMessagesRequest(server string, tenantId TenantId, id string, params *GetTenantIdApisDistributedtaskPoolsIdMessagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/_apis/distributedtask/pools/%s/messages", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SessionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sessionId", runtime.ParamLocationQuery, *params.SessionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RunnerVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "runnerVersion", runtime.ParamLocationQuery, *params.RunnerVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Os != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os", runtime.ParamLocationQuery, *params.Os); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Architecture != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "architecture", runtime.ParamLocationQuery, *params.Architecture); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DisableUpdate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disableUpdate", runtime.ParamLocationQuery, *params.DisableUpdate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Request generates requests for DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1
func NewDeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Request(server string, tenantId TenantId, id string, id1 string, params *DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id1", runtime.ParamLocationPath, id1)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/_apis/distributedtask/pools/%s/messages/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SessionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sessionId", runtime.ParamLocationQuery, *params.SessionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTenantIdApisDistributedtaskPoolsIdSessionsRequest calls the generic PostTenantIdApisDistributedtaskPoolsIdSessions builder with application/json body
func NewPostTenantIdApisDistributedtaskPoolsIdSessionsRequest(server string, tenantId TenantId, id string, body PostTenantIdApisDistributedtaskPoolsIdSessionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTenantIdApisDistributedtaskPoolsIdSessionsRequestWithBody(server, tenantId, id, "application/json", bodyReader)
}

// NewPostTenantIdApisDistributedtaskPoolsIdSessionsRequestWithBody generates requests for PostTenantIdApisDistributedtaskPoolsIdSessions with any type of body
func NewPostTenantIdApisDistributedtaskPoolsIdSessionsRequestWithBody(server string, tenantId TenantId, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/_apis/distributedtask/pools/%s/sessions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdRequest generates requests for DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionId
func NewDeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdRequest(server string, tenantId TenantId, id string, sessionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/_apis/distributedtask/pools/%s/sessions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetTenantIdApisConnectionDataWithResponse request
	GetTenantIdApisConnectionDataWithResponse(ctx context.Context, tenantId TenantId, params *GetTenantIdApisConnectionDataParams, reqEditors ...RequestEditorFn) (*GetTenantIdApisConnectionDataResponse, error)

	// GetTenantIdApisDistributedtaskPoolsWithResponse request
	GetTenantIdApisDistributedtaskPoolsWithResponse(ctx context.Context, tenantId TenantId, params *GetTenantIdApisDistributedtaskPoolsParams, reqEditors ...RequestEditorFn) (*GetTenantIdApisDistributedtaskPoolsResponse, error)

	// GetTenantIdApisDistributedtaskPoolsIdAgentsWithResponse request
	GetTenantIdApisDistributedtaskPoolsIdAgentsWithResponse(ctx context.Context, tenantId TenantId, id string, params *GetTenantIdApisDistributedtaskPoolsIdAgentsParams, reqEditors ...RequestEditorFn) (*GetTenantIdApisDistributedtaskPoolsIdAgentsResponse, error)

	// PostTenantIdApisDistributedtaskPoolsIdAgentsWithBodyWithResponse request with any body
	PostTenantIdApisDistributedtaskPoolsIdAgentsWithBodyWithResponse(ctx context.Context, tenantId TenantId, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTenantIdApisDistributedtaskPoolsIdAgentsResponse, error)

	PostTenantIdApisDistributedtaskPoolsIdAgentsWithResponse(ctx context.Context, tenantId TenantId, id string, body PostTenantIdApisDistributedtaskPoolsIdAgentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTenantIdApisDistributedtaskPoolsIdAgentsResponse, error)

	// GetTenantIdApisDistributedtaskPoolsIdMessagesWithResponse request
	GetTenantIdApisDistributedtaskPoolsIdMessagesWithResponse(ctx context.Context, tenantId TenantId, id string, params *GetTenantIdApisDistributedtaskPoolsIdMessagesParams, reqEditors ...RequestEditorFn) (*GetTenantIdApisDistributedtaskPoolsIdMessagesResponse, error)

	// DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1WithResponse request
	DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1WithResponse(ctx context.Context, tenantId TenantId, id string, id1 string, params *DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Params, reqEditors ...RequestEditorFn) (*DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Response, error)

	// PostTenantIdApisDistributedtaskPoolsIdSessionsWithBodyWithResponse request with any body
	PostTenantIdApisDistributedtaskPoolsIdSessionsWithBodyWithResponse(ctx context.Context, tenantId TenantId, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTenantIdApisDistributedtaskPoolsIdSessionsResponse, error)

	PostTenantIdApisDistributedtaskPoolsIdSessionsWithResponse(ctx context.Context, tenantId TenantId, id string, body PostTenantIdApisDistributedtaskPoolsIdSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTenantIdApisDistributedtaskPoolsIdSessionsResponse, error)

	// DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdWithResponse request
	DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdWithResponse(ctx context.Context, tenantId TenantId, id string, sessionId string, reqEditors ...RequestEditorFn) (*DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdResponse, error)
}

type GetTenantIdApisConnectionDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DeploymentId        *string `json:"deploymentId,omitempty"`
		DeploymentType      *string `json:"deploymentType,omitempty"`
		InstanceId          *string `json:"instanceId,omitempty"`
		LocationServiceData *struct {
			AccessMappings *[]struct {
				AccessPoint  *string `json:"accessPoint,omitempty"`
				DisplayName  *string `json:"displayName,omitempty"`
				Moniker      *string `json:"moniker,omitempty"`
				ServiceOwner *string `json:"serviceOwner,omitempty"`
			} `json:"accessMappings,omitempty"`
			DefaultAccessMappingMoniker *string  `json:"defaultAccessMappingMoniker,omitempty"`
			LastChangeId                *float32 `json:"lastChangeId,omitempty"`
			LastChangeId64              *float32 `json:"lastChangeId64,omitempty"`
			ServiceDefinitions          *[]struct {
				Description       *string                 `json:"description,omitempty"`
				DisplayName       *string                 `json:"displayName,omitempty"`
				Identifier        *string                 `json:"identifier,omitempty"`
				LocationMappings  *[]interface{}          `json:"locationMappings,omitempty"`
				ParentIdentifier  *string                 `json:"parentIdentifier,omitempty"`
				ParentServiceType *string                 `json:"parentServiceType,omitempty"`
				Properties        *map[string]interface{} `json:"properties,omitempty"`
				RelativeToSetting *string                 `json:"relativeToSetting,omitempty"`
				ServiceOwner      *string                 `json:"serviceOwner,omitempty"`
				ServiceType       *string                 `json:"serviceType,omitempty"`
				ToolId            *string                 `json:"toolId,omitempty"`
			} `json:"serviceDefinitions,omitempty"`
			ServiceOwner *string `json:"serviceOwner,omitempty"`
		} `json:"locationServiceData,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTenantIdApisConnectionDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTenantIdApisConnectionDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTenantIdApisDistributedtaskPoolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count *float32 `json:"count,omitempty"`
		Value *[]struct {
			AgentCloudId *map[string]interface{} `json:"agentCloudId"`
			AutoSize     *bool                   `json:"autoSize,omitempty"`
			CreatedOn    *string                 `json:"createdOn,omitempty"`
			Id           *float32                `json:"id,omitempty"`
			IsHosted     *bool                   `json:"isHosted,omitempty"`
			IsInternal   *bool                   `json:"isInternal,omitempty"`
			Name         *string                 `json:"name,omitempty"`
			Scope        *string                 `json:"scope,omitempty"`
			Size         *float32                `json:"size,omitempty"`
			TargetSize   *map[string]interface{} `json:"targetSize"`
		} `json:"value,omitempty"`
	}
	JSON401 *struct {
		Id             *string                 `json:"$id,omitempty"`
		ErrorCode      *float32                `json:"errorCode,omitempty"`
		EventId        *float32                `json:"eventId,omitempty"`
		InnerException *map[string]interface{} `json:"innerException"`
		Message        *string                 `json:"message,omitempty"`
		TypeKey        *string                 `json:"typeKey,omitempty"`
		TypeName       *string                 `json:"typeName,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTenantIdApisDistributedtaskPoolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTenantIdApisDistributedtaskPoolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTenantIdApisDistributedtaskPoolsIdAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count *float32       `json:"count,omitempty"`
		Value *[]interface{} `json:"value,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTenantIdApisDistributedtaskPoolsIdAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTenantIdApisDistributedtaskPoolsIdAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTenantIdApisDistributedtaskPoolsIdAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Authorization *struct {
			AuthorizationUrl *string `json:"authorizationUrl,omitempty"`
			ClientId         *string `json:"clientId,omitempty"`
			PublicKey        *struct {
				Exponent *string `json:"exponent,omitempty"`
				Modulus  *string `json:"modulus,omitempty"`
			} `json:"publicKey,omitempty"`
		} `json:"authorization,omitempty"`
		CreatedOn          *string  `json:"createdOn,omitempty"`
		CurrentParallelism *float32 `json:"currentParallelism,omitempty"`
		DisableUpdate      *bool    `json:"disableUpdate,omitempty"`
		Enabled            *bool    `json:"enabled,omitempty"`
		Ephemeral          *bool    `json:"ephemeral,omitempty"`
		Id                 *float32 `json:"id,omitempty"`
		IsElastic          *bool    `json:"isElastic,omitempty"`
		IsVirtual          *bool    `json:"isVirtual,omitempty"`
		Labels             *[]struct {
			Id   *float32 `json:"id,omitempty"`
			Name *string  `json:"name,omitempty"`
			Type *string  `json:"type,omitempty"`
		} `json:"labels,omitempty"`
		MaxParallelism *float32                `json:"maxParallelism,omitempty"`
		Name           *string                 `json:"name,omitempty"`
		OsDescription  *string                 `json:"osDescription,omitempty"`
		OwningTenant   *map[string]interface{} `json:"owningTenant"`
		Properties     *struct {
			RequireFipsCryptography *struct {
				Type  *string `json:"$type,omitempty"`
				Value *bool   `json:"$value,omitempty"`
			} `json:"RequireFipsCryptography,omitempty"`
			ServerUrl *struct {
				Type  *string `json:"$type,omitempty"`
				Value *string `json:"$value,omitempty"`
			} `json:"ServerUrl,omitempty"`
		} `json:"properties,omitempty"`
		ProvisioningState *string                 `json:"provisioningState,omitempty"`
		QueueName         *string                 `json:"queueName,omitempty"`
		RunnerGroupId     *float32                `json:"runnerGroupId,omitempty"`
		RunnerGroupName   *map[string]interface{} `json:"runnerGroupName"`
		Status            *string                 `json:"status,omitempty"`
		Version           *string                 `json:"version,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostTenantIdApisDistributedtaskPoolsIdAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTenantIdApisDistributedtaskPoolsIdAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTenantIdApisDistributedtaskPoolsIdMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Body        *string `json:"body,omitempty"`
		MessageType *string `json:"messageType,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTenantIdApisDistributedtaskPoolsIdMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTenantIdApisDistributedtaskPoolsIdMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTenantIdApisDistributedtaskPoolsIdSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Agent *struct {
			Ephemeral         *map[string]interface{} `json:"ephemeral"`
			Id                *float32                `json:"id,omitempty"`
			IsVirtual         *bool                   `json:"isVirtual,omitempty"`
			Name              *string                 `json:"name,omitempty"`
			OsDescription     *string                 `json:"osDescription,omitempty"`
			OwningTenant      *map[string]interface{} `json:"owningTenant"`
			ProvisioningState *map[string]interface{} `json:"provisioningState"`
			RunnerGroupId     *map[string]interface{} `json:"runnerGroupId"`
			RunnerGroupName   *map[string]interface{} `json:"runnerGroupName"`
			Status            *float32                `json:"status,omitempty"`
			Version           *string                 `json:"version,omitempty"`
		} `json:"agent,omitempty"`
		EncryptionKey *struct {
			Encrypted *bool   `json:"encrypted,omitempty"`
			Value     *string `json:"value,omitempty"`
		} `json:"encryptionKey,omitempty"`
		OwnerName         *string `json:"ownerName,omitempty"`
		SessionId         *string `json:"sessionId,omitempty"`
		UseFipsEncryption *bool   `json:"useFipsEncryption,omitempty"`
	}
	JSON401 *struct {
		Id             *string                 `json:"$id,omitempty"`
		ErrorCode      *float32                `json:"errorCode,omitempty"`
		EventId        *float32                `json:"eventId,omitempty"`
		InnerException *map[string]interface{} `json:"innerException"`
		Message        *string                 `json:"message,omitempty"`
		TypeKey        *string                 `json:"typeKey,omitempty"`
		TypeName       *string                 `json:"typeName,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostTenantIdApisDistributedtaskPoolsIdSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTenantIdApisDistributedtaskPoolsIdSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetTenantIdApisConnectionDataWithResponse request returning *GetTenantIdApisConnectionDataResponse
func (c *ClientWithResponses) GetTenantIdApisConnectionDataWithResponse(ctx context.Context, tenantId TenantId, params *GetTenantIdApisConnectionDataParams, reqEditors ...RequestEditorFn) (*GetTenantIdApisConnectionDataResponse, error) {
	rsp, err := c.GetTenantIdApisConnectionData(ctx, tenantId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTenantIdApisConnectionDataResponse(rsp)
}

// GetTenantIdApisDistributedtaskPoolsWithResponse request returning *GetTenantIdApisDistributedtaskPoolsResponse
func (c *ClientWithResponses) GetTenantIdApisDistributedtaskPoolsWithResponse(ctx context.Context, tenantId TenantId, params *GetTenantIdApisDistributedtaskPoolsParams, reqEditors ...RequestEditorFn) (*GetTenantIdApisDistributedtaskPoolsResponse, error) {
	rsp, err := c.GetTenantIdApisDistributedtaskPools(ctx, tenantId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTenantIdApisDistributedtaskPoolsResponse(rsp)
}

// GetTenantIdApisDistributedtaskPoolsIdAgentsWithResponse request returning *GetTenantIdApisDistributedtaskPoolsIdAgentsResponse
func (c *ClientWithResponses) GetTenantIdApisDistributedtaskPoolsIdAgentsWithResponse(ctx context.Context, tenantId TenantId, id string, params *GetTenantIdApisDistributedtaskPoolsIdAgentsParams, reqEditors ...RequestEditorFn) (*GetTenantIdApisDistributedtaskPoolsIdAgentsResponse, error) {
	rsp, err := c.GetTenantIdApisDistributedtaskPoolsIdAgents(ctx, tenantId, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTenantIdApisDistributedtaskPoolsIdAgentsResponse(rsp)
}

// PostTenantIdApisDistributedtaskPoolsIdAgentsWithBodyWithResponse request with arbitrary body returning *PostTenantIdApisDistributedtaskPoolsIdAgentsResponse
func (c *ClientWithResponses) PostTenantIdApisDistributedtaskPoolsIdAgentsWithBodyWithResponse(ctx context.Context, tenantId TenantId, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTenantIdApisDistributedtaskPoolsIdAgentsResponse, error) {
	rsp, err := c.PostTenantIdApisDistributedtaskPoolsIdAgentsWithBody(ctx, tenantId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTenantIdApisDistributedtaskPoolsIdAgentsResponse(rsp)
}

func (c *ClientWithResponses) PostTenantIdApisDistributedtaskPoolsIdAgentsWithResponse(ctx context.Context, tenantId TenantId, id string, body PostTenantIdApisDistributedtaskPoolsIdAgentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTenantIdApisDistributedtaskPoolsIdAgentsResponse, error) {
	rsp, err := c.PostTenantIdApisDistributedtaskPoolsIdAgents(ctx, tenantId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTenantIdApisDistributedtaskPoolsIdAgentsResponse(rsp)
}

// GetTenantIdApisDistributedtaskPoolsIdMessagesWithResponse request returning *GetTenantIdApisDistributedtaskPoolsIdMessagesResponse
func (c *ClientWithResponses) GetTenantIdApisDistributedtaskPoolsIdMessagesWithResponse(ctx context.Context, tenantId TenantId, id string, params *GetTenantIdApisDistributedtaskPoolsIdMessagesParams, reqEditors ...RequestEditorFn) (*GetTenantIdApisDistributedtaskPoolsIdMessagesResponse, error) {
	rsp, err := c.GetTenantIdApisDistributedtaskPoolsIdMessages(ctx, tenantId, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTenantIdApisDistributedtaskPoolsIdMessagesResponse(rsp)
}

// DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1WithResponse request returning *DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Response
func (c *ClientWithResponses) DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1WithResponse(ctx context.Context, tenantId TenantId, id string, id1 string, params *DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Params, reqEditors ...RequestEditorFn) (*DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Response, error) {
	rsp, err := c.DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1(ctx, tenantId, id, id1, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Response(rsp)
}

// PostTenantIdApisDistributedtaskPoolsIdSessionsWithBodyWithResponse request with arbitrary body returning *PostTenantIdApisDistributedtaskPoolsIdSessionsResponse
func (c *ClientWithResponses) PostTenantIdApisDistributedtaskPoolsIdSessionsWithBodyWithResponse(ctx context.Context, tenantId TenantId, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTenantIdApisDistributedtaskPoolsIdSessionsResponse, error) {
	rsp, err := c.PostTenantIdApisDistributedtaskPoolsIdSessionsWithBody(ctx, tenantId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTenantIdApisDistributedtaskPoolsIdSessionsResponse(rsp)
}

func (c *ClientWithResponses) PostTenantIdApisDistributedtaskPoolsIdSessionsWithResponse(ctx context.Context, tenantId TenantId, id string, body PostTenantIdApisDistributedtaskPoolsIdSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTenantIdApisDistributedtaskPoolsIdSessionsResponse, error) {
	rsp, err := c.PostTenantIdApisDistributedtaskPoolsIdSessions(ctx, tenantId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTenantIdApisDistributedtaskPoolsIdSessionsResponse(rsp)
}

// DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdWithResponse request returning *DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdResponse
func (c *ClientWithResponses) DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdWithResponse(ctx context.Context, tenantId TenantId, id string, sessionId string, reqEditors ...RequestEditorFn) (*DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdResponse, error) {
	rsp, err := c.DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionId(ctx, tenantId, id, sessionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdResponse(rsp)
}

// ParseGetTenantIdApisConnectionDataResponse parses an HTTP response from a GetTenantIdApisConnectionDataWithResponse call
func ParseGetTenantIdApisConnectionDataResponse(rsp *http.Response) (*GetTenantIdApisConnectionDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTenantIdApisConnectionDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DeploymentId        *string `json:"deploymentId,omitempty"`
			DeploymentType      *string `json:"deploymentType,omitempty"`
			InstanceId          *string `json:"instanceId,omitempty"`
			LocationServiceData *struct {
				AccessMappings *[]struct {
					AccessPoint  *string `json:"accessPoint,omitempty"`
					DisplayName  *string `json:"displayName,omitempty"`
					Moniker      *string `json:"moniker,omitempty"`
					ServiceOwner *string `json:"serviceOwner,omitempty"`
				} `json:"accessMappings,omitempty"`
				DefaultAccessMappingMoniker *string  `json:"defaultAccessMappingMoniker,omitempty"`
				LastChangeId                *float32 `json:"lastChangeId,omitempty"`
				LastChangeId64              *float32 `json:"lastChangeId64,omitempty"`
				ServiceDefinitions          *[]struct {
					Description       *string                 `json:"description,omitempty"`
					DisplayName       *string                 `json:"displayName,omitempty"`
					Identifier        *string                 `json:"identifier,omitempty"`
					LocationMappings  *[]interface{}          `json:"locationMappings,omitempty"`
					ParentIdentifier  *string                 `json:"parentIdentifier,omitempty"`
					ParentServiceType *string                 `json:"parentServiceType,omitempty"`
					Properties        *map[string]interface{} `json:"properties,omitempty"`
					RelativeToSetting *string                 `json:"relativeToSetting,omitempty"`
					ServiceOwner      *string                 `json:"serviceOwner,omitempty"`
					ServiceType       *string                 `json:"serviceType,omitempty"`
					ToolId            *string                 `json:"toolId,omitempty"`
				} `json:"serviceDefinitions,omitempty"`
				ServiceOwner *string `json:"serviceOwner,omitempty"`
			} `json:"locationServiceData,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTenantIdApisDistributedtaskPoolsResponse parses an HTTP response from a GetTenantIdApisDistributedtaskPoolsWithResponse call
func ParseGetTenantIdApisDistributedtaskPoolsResponse(rsp *http.Response) (*GetTenantIdApisDistributedtaskPoolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTenantIdApisDistributedtaskPoolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count *float32 `json:"count,omitempty"`
			Value *[]struct {
				AgentCloudId *map[string]interface{} `json:"agentCloudId"`
				AutoSize     *bool                   `json:"autoSize,omitempty"`
				CreatedOn    *string                 `json:"createdOn,omitempty"`
				Id           *float32                `json:"id,omitempty"`
				IsHosted     *bool                   `json:"isHosted,omitempty"`
				IsInternal   *bool                   `json:"isInternal,omitempty"`
				Name         *string                 `json:"name,omitempty"`
				Scope        *string                 `json:"scope,omitempty"`
				Size         *float32                `json:"size,omitempty"`
				TargetSize   *map[string]interface{} `json:"targetSize"`
			} `json:"value,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id             *string                 `json:"$id,omitempty"`
			ErrorCode      *float32                `json:"errorCode,omitempty"`
			EventId        *float32                `json:"eventId,omitempty"`
			InnerException *map[string]interface{} `json:"innerException"`
			Message        *string                 `json:"message,omitempty"`
			TypeKey        *string                 `json:"typeKey,omitempty"`
			TypeName       *string                 `json:"typeName,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetTenantIdApisDistributedtaskPoolsIdAgentsResponse parses an HTTP response from a GetTenantIdApisDistributedtaskPoolsIdAgentsWithResponse call
func ParseGetTenantIdApisDistributedtaskPoolsIdAgentsResponse(rsp *http.Response) (*GetTenantIdApisDistributedtaskPoolsIdAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTenantIdApisDistributedtaskPoolsIdAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count *float32       `json:"count,omitempty"`
			Value *[]interface{} `json:"value,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTenantIdApisDistributedtaskPoolsIdAgentsResponse parses an HTTP response from a PostTenantIdApisDistributedtaskPoolsIdAgentsWithResponse call
func ParsePostTenantIdApisDistributedtaskPoolsIdAgentsResponse(rsp *http.Response) (*PostTenantIdApisDistributedtaskPoolsIdAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTenantIdApisDistributedtaskPoolsIdAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Authorization *struct {
				AuthorizationUrl *string `json:"authorizationUrl,omitempty"`
				ClientId         *string `json:"clientId,omitempty"`
				PublicKey        *struct {
					Exponent *string `json:"exponent,omitempty"`
					Modulus  *string `json:"modulus,omitempty"`
				} `json:"publicKey,omitempty"`
			} `json:"authorization,omitempty"`
			CreatedOn          *string  `json:"createdOn,omitempty"`
			CurrentParallelism *float32 `json:"currentParallelism,omitempty"`
			DisableUpdate      *bool    `json:"disableUpdate,omitempty"`
			Enabled            *bool    `json:"enabled,omitempty"`
			Ephemeral          *bool    `json:"ephemeral,omitempty"`
			Id                 *float32 `json:"id,omitempty"`
			IsElastic          *bool    `json:"isElastic,omitempty"`
			IsVirtual          *bool    `json:"isVirtual,omitempty"`
			Labels             *[]struct {
				Id   *float32 `json:"id,omitempty"`
				Name *string  `json:"name,omitempty"`
				Type *string  `json:"type,omitempty"`
			} `json:"labels,omitempty"`
			MaxParallelism *float32                `json:"maxParallelism,omitempty"`
			Name           *string                 `json:"name,omitempty"`
			OsDescription  *string                 `json:"osDescription,omitempty"`
			OwningTenant   *map[string]interface{} `json:"owningTenant"`
			Properties     *struct {
				RequireFipsCryptography *struct {
					Type  *string `json:"$type,omitempty"`
					Value *bool   `json:"$value,omitempty"`
				} `json:"RequireFipsCryptography,omitempty"`
				ServerUrl *struct {
					Type  *string `json:"$type,omitempty"`
					Value *string `json:"$value,omitempty"`
				} `json:"ServerUrl,omitempty"`
			} `json:"properties,omitempty"`
			ProvisioningState *string                 `json:"provisioningState,omitempty"`
			QueueName         *string                 `json:"queueName,omitempty"`
			RunnerGroupId     *float32                `json:"runnerGroupId,omitempty"`
			RunnerGroupName   *map[string]interface{} `json:"runnerGroupName"`
			Status            *string                 `json:"status,omitempty"`
			Version           *string                 `json:"version,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTenantIdApisDistributedtaskPoolsIdMessagesResponse parses an HTTP response from a GetTenantIdApisDistributedtaskPoolsIdMessagesWithResponse call
func ParseGetTenantIdApisDistributedtaskPoolsIdMessagesResponse(rsp *http.Response) (*GetTenantIdApisDistributedtaskPoolsIdMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTenantIdApisDistributedtaskPoolsIdMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Body        *string `json:"body,omitempty"`
			MessageType *string `json:"messageType,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Response parses an HTTP response from a DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1WithResponse call
func ParseDeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Response(rsp *http.Response) (*DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostTenantIdApisDistributedtaskPoolsIdSessionsResponse parses an HTTP response from a PostTenantIdApisDistributedtaskPoolsIdSessionsWithResponse call
func ParsePostTenantIdApisDistributedtaskPoolsIdSessionsResponse(rsp *http.Response) (*PostTenantIdApisDistributedtaskPoolsIdSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTenantIdApisDistributedtaskPoolsIdSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Agent *struct {
				Ephemeral         *map[string]interface{} `json:"ephemeral"`
				Id                *float32                `json:"id,omitempty"`
				IsVirtual         *bool                   `json:"isVirtual,omitempty"`
				Name              *string                 `json:"name,omitempty"`
				OsDescription     *string                 `json:"osDescription,omitempty"`
				OwningTenant      *map[string]interface{} `json:"owningTenant"`
				ProvisioningState *map[string]interface{} `json:"provisioningState"`
				RunnerGroupId     *map[string]interface{} `json:"runnerGroupId"`
				RunnerGroupName   *map[string]interface{} `json:"runnerGroupName"`
				Status            *float32                `json:"status,omitempty"`
				Version           *string                 `json:"version,omitempty"`
			} `json:"agent,omitempty"`
			EncryptionKey *struct {
				Encrypted *bool   `json:"encrypted,omitempty"`
				Value     *string `json:"value,omitempty"`
			} `json:"encryptionKey,omitempty"`
			OwnerName         *string `json:"ownerName,omitempty"`
			SessionId         *string `json:"sessionId,omitempty"`
			UseFipsEncryption *bool   `json:"useFipsEncryption,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Id             *string                 `json:"$id,omitempty"`
			ErrorCode      *float32                `json:"errorCode,omitempty"`
			EventId        *float32                `json:"eventId,omitempty"`
			InnerException *map[string]interface{} `json:"innerException"`
			Message        *string                 `json:"message,omitempty"`
			TypeKey        *string                 `json:"typeKey,omitempty"`
			TypeName       *string                 `json:"typeName,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseDeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdResponse parses an HTTP response from a DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdWithResponse call
func ParseDeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdResponse(rsp *http.Response) (*DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /{tenantId}/_apis/connectionData)
	GetTenantIdApisConnectionData(ctx echo.Context, tenantId TenantId, params GetTenantIdApisConnectionDataParams) error

	// (GET /{tenantId}/_apis/distributedtask/pools)
	GetTenantIdApisDistributedtaskPools(ctx echo.Context, tenantId TenantId, params GetTenantIdApisDistributedtaskPoolsParams) error

	// (GET /{tenantId}/_apis/distributedtask/pools/{id}/agents)
	GetTenantIdApisDistributedtaskPoolsIdAgents(ctx echo.Context, tenantId TenantId, id string, params GetTenantIdApisDistributedtaskPoolsIdAgentsParams) error

	// (POST /{tenantId}/_apis/distributedtask/pools/{id}/agents)
	PostTenantIdApisDistributedtaskPoolsIdAgents(ctx echo.Context, tenantId TenantId, id string) error

	// (GET /{tenantId}/_apis/distributedtask/pools/{id}/messages)
	GetTenantIdApisDistributedtaskPoolsIdMessages(ctx echo.Context, tenantId TenantId, id string, params GetTenantIdApisDistributedtaskPoolsIdMessagesParams) error

	// (DELETE /{tenantId}/_apis/distributedtask/pools/{id}/messages/{id1})
	DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1(ctx echo.Context, tenantId TenantId, id string, id1 string, params DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Params) error

	// (POST /{tenantId}/_apis/distributedtask/pools/{id}/sessions)
	PostTenantIdApisDistributedtaskPoolsIdSessions(ctx echo.Context, tenantId TenantId, id string) error

	// (DELETE /{tenantId}/_apis/distributedtask/pools/{id}/sessions/{sessionId})
	DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionId(ctx echo.Context, tenantId TenantId, id string, sessionId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTenantIdApisConnectionData converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenantIdApisConnectionData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantId

	err = runtime.BindStyledParameterWithOptions("simple", "tenantId", ctx.Param("tenantId"), &tenantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTenantIdApisConnectionDataParams
	// ------------- Optional query parameter "connectOptions" -------------

	err = runtime.BindQueryParameter("form", true, false, "connectOptions", ctx.QueryParams(), &params.ConnectOptions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter connectOptions: %s", err))
	}

	// ------------- Optional query parameter "lastChangeId" -------------

	err = runtime.BindQueryParameter("form", true, false, "lastChangeId", ctx.QueryParams(), &params.LastChangeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lastChangeId: %s", err))
	}

	// ------------- Optional query parameter "lastChangeId64" -------------

	err = runtime.BindQueryParameter("form", true, false, "lastChangeId64", ctx.QueryParams(), &params.LastChangeId64)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lastChangeId64: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTenantIdApisConnectionData(ctx, tenantId, params)
	return err
}

// GetTenantIdApisDistributedtaskPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenantIdApisDistributedtaskPools(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantId

	err = runtime.BindStyledParameterWithOptions("simple", "tenantId", ctx.Param("tenantId"), &tenantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTenantIdApisDistributedtaskPoolsParams
	// ------------- Optional query parameter "poolType" -------------

	err = runtime.BindQueryParameter("form", true, false, "poolType", ctx.QueryParams(), &params.PoolType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter poolType: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTenantIdApisDistributedtaskPools(ctx, tenantId, params)
	return err
}

// GetTenantIdApisDistributedtaskPoolsIdAgents converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenantIdApisDistributedtaskPoolsIdAgents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantId

	err = runtime.BindStyledParameterWithOptions("simple", "tenantId", ctx.Param("tenantId"), &tenantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTenantIdApisDistributedtaskPoolsIdAgentsParams
	// ------------- Optional query parameter "agentName" -------------

	err = runtime.BindQueryParameter("form", true, false, "agentName", ctx.QueryParams(), &params.AgentName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter agentName: %s", err))
	}

	// ------------- Optional query parameter "includeCapabilities" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeCapabilities", ctx.QueryParams(), &params.IncludeCapabilities)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter includeCapabilities: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTenantIdApisDistributedtaskPoolsIdAgents(ctx, tenantId, id, params)
	return err
}

// PostTenantIdApisDistributedtaskPoolsIdAgents converts echo context to params.
func (w *ServerInterfaceWrapper) PostTenantIdApisDistributedtaskPoolsIdAgents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantId

	err = runtime.BindStyledParameterWithOptions("simple", "tenantId", ctx.Param("tenantId"), &tenantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTenantIdApisDistributedtaskPoolsIdAgents(ctx, tenantId, id)
	return err
}

// GetTenantIdApisDistributedtaskPoolsIdMessages converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenantIdApisDistributedtaskPoolsIdMessages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantId

	err = runtime.BindStyledParameterWithOptions("simple", "tenantId", ctx.Param("tenantId"), &tenantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTenantIdApisDistributedtaskPoolsIdMessagesParams
	// ------------- Optional query parameter "sessionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "sessionId", ctx.QueryParams(), &params.SessionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sessionId: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "runnerVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "runnerVersion", ctx.QueryParams(), &params.RunnerVersion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter runnerVersion: %s", err))
	}

	// ------------- Optional query parameter "os" -------------

	err = runtime.BindQueryParameter("form", true, false, "os", ctx.QueryParams(), &params.Os)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter os: %s", err))
	}

	// ------------- Optional query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, false, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Optional query parameter "disableUpdate" -------------

	err = runtime.BindQueryParameter("form", true, false, "disableUpdate", ctx.QueryParams(), &params.DisableUpdate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter disableUpdate: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTenantIdApisDistributedtaskPoolsIdMessages(ctx, tenantId, id, params)
	return err
}

// DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1 converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantId

	err = runtime.BindStyledParameterWithOptions("simple", "tenantId", ctx.Param("tenantId"), &tenantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "id1" -------------
	var id1 string

	err = runtime.BindStyledParameterWithOptions("simple", "id1", ctx.Param("id1"), &id1, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id1: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Params
	// ------------- Optional query parameter "sessionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "sessionId", ctx.QueryParams(), &params.SessionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sessionId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1(ctx, tenantId, id, id1, params)
	return err
}

// PostTenantIdApisDistributedtaskPoolsIdSessions converts echo context to params.
func (w *ServerInterfaceWrapper) PostTenantIdApisDistributedtaskPoolsIdSessions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantId

	err = runtime.BindStyledParameterWithOptions("simple", "tenantId", ctx.Param("tenantId"), &tenantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTenantIdApisDistributedtaskPoolsIdSessions(ctx, tenantId, id)
	return err
}

// DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantId

	err = runtime.BindStyledParameterWithOptions("simple", "tenantId", ctx.Param("tenantId"), &tenantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "sessionId" -------------
	var sessionId string

	err = runtime.BindStyledParameterWithOptions("simple", "sessionId", ctx.Param("sessionId"), &sessionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sessionId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionId(ctx, tenantId, id, sessionId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/:tenantId/_apis/connectionData", wrapper.GetTenantIdApisConnectionData)
	router.GET(baseURL+"/:tenantId/_apis/distributedtask/pools", wrapper.GetTenantIdApisDistributedtaskPools)
	router.GET(baseURL+"/:tenantId/_apis/distributedtask/pools/:id/agents", wrapper.GetTenantIdApisDistributedtaskPoolsIdAgents)
	router.POST(baseURL+"/:tenantId/_apis/distributedtask/pools/:id/agents", wrapper.PostTenantIdApisDistributedtaskPoolsIdAgents)
	router.GET(baseURL+"/:tenantId/_apis/distributedtask/pools/:id/messages", wrapper.GetTenantIdApisDistributedtaskPoolsIdMessages)
	router.DELETE(baseURL+"/:tenantId/_apis/distributedtask/pools/:id/messages/:id1", wrapper.DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1)
	router.POST(baseURL+"/:tenantId/_apis/distributedtask/pools/:id/sessions", wrapper.PostTenantIdApisDistributedtaskPoolsIdSessions)
	router.DELETE(baseURL+"/:tenantId/_apis/distributedtask/pools/:id/sessions/:sessionId", wrapper.DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionId)

}

type GetTenantIdApisConnectionDataRequestObject struct {
	TenantId TenantId `json:"tenantId"`
	Params   GetTenantIdApisConnectionDataParams
}

type GetTenantIdApisConnectionDataResponseObject interface {
	VisitGetTenantIdApisConnectionDataResponse(w http.ResponseWriter) error
}

type GetTenantIdApisConnectionData200JSONResponse struct {
	DeploymentId        *string `json:"deploymentId,omitempty"`
	DeploymentType      *string `json:"deploymentType,omitempty"`
	InstanceId          *string `json:"instanceId,omitempty"`
	LocationServiceData *struct {
		AccessMappings *[]struct {
			AccessPoint  *string `json:"accessPoint,omitempty"`
			DisplayName  *string `json:"displayName,omitempty"`
			Moniker      *string `json:"moniker,omitempty"`
			ServiceOwner *string `json:"serviceOwner,omitempty"`
		} `json:"accessMappings,omitempty"`
		DefaultAccessMappingMoniker *string  `json:"defaultAccessMappingMoniker,omitempty"`
		LastChangeId                *float32 `json:"lastChangeId,omitempty"`
		LastChangeId64              *float32 `json:"lastChangeId64,omitempty"`
		ServiceDefinitions          *[]struct {
			Description       *string                 `json:"description,omitempty"`
			DisplayName       *string                 `json:"displayName,omitempty"`
			Identifier        *string                 `json:"identifier,omitempty"`
			LocationMappings  *[]interface{}          `json:"locationMappings,omitempty"`
			ParentIdentifier  *string                 `json:"parentIdentifier,omitempty"`
			ParentServiceType *string                 `json:"parentServiceType,omitempty"`
			Properties        *map[string]interface{} `json:"properties,omitempty"`
			RelativeToSetting *string                 `json:"relativeToSetting,omitempty"`
			ServiceOwner      *string                 `json:"serviceOwner,omitempty"`
			ServiceType       *string                 `json:"serviceType,omitempty"`
			ToolId            *string                 `json:"toolId,omitempty"`
		} `json:"serviceDefinitions,omitempty"`
		ServiceOwner *string `json:"serviceOwner,omitempty"`
	} `json:"locationServiceData,omitempty"`
}

func (response GetTenantIdApisConnectionData200JSONResponse) VisitGetTenantIdApisConnectionDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTenantIdApisDistributedtaskPoolsRequestObject struct {
	TenantId TenantId `json:"tenantId"`
	Params   GetTenantIdApisDistributedtaskPoolsParams
}

type GetTenantIdApisDistributedtaskPoolsResponseObject interface {
	VisitGetTenantIdApisDistributedtaskPoolsResponse(w http.ResponseWriter) error
}

type GetTenantIdApisDistributedtaskPools200JSONResponse struct {
	Count *float32 `json:"count,omitempty"`
	Value *[]struct {
		AgentCloudId *map[string]interface{} `json:"agentCloudId"`
		AutoSize     *bool                   `json:"autoSize,omitempty"`
		CreatedOn    *string                 `json:"createdOn,omitempty"`
		Id           *float32                `json:"id,omitempty"`
		IsHosted     *bool                   `json:"isHosted,omitempty"`
		IsInternal   *bool                   `json:"isInternal,omitempty"`
		Name         *string                 `json:"name,omitempty"`
		Scope        *string                 `json:"scope,omitempty"`
		Size         *float32                `json:"size,omitempty"`
		TargetSize   *map[string]interface{} `json:"targetSize"`
	} `json:"value,omitempty"`
}

func (response GetTenantIdApisDistributedtaskPools200JSONResponse) VisitGetTenantIdApisDistributedtaskPoolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTenantIdApisDistributedtaskPools401JSONResponse struct {
	Id             *string                 `json:"$id,omitempty"`
	ErrorCode      *float32                `json:"errorCode,omitempty"`
	EventId        *float32                `json:"eventId,omitempty"`
	InnerException *map[string]interface{} `json:"innerException"`
	Message        *string                 `json:"message,omitempty"`
	TypeKey        *string                 `json:"typeKey,omitempty"`
	TypeName       *string                 `json:"typeName,omitempty"`
}

func (response GetTenantIdApisDistributedtaskPools401JSONResponse) VisitGetTenantIdApisDistributedtaskPoolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetTenantIdApisDistributedtaskPoolsIdAgentsRequestObject struct {
	TenantId TenantId `json:"tenantId"`
	Id       string   `json:"id"`
	Params   GetTenantIdApisDistributedtaskPoolsIdAgentsParams
}

type GetTenantIdApisDistributedtaskPoolsIdAgentsResponseObject interface {
	VisitGetTenantIdApisDistributedtaskPoolsIdAgentsResponse(w http.ResponseWriter) error
}

type GetTenantIdApisDistributedtaskPoolsIdAgents200JSONResponse struct {
	Count *float32       `json:"count,omitempty"`
	Value *[]interface{} `json:"value,omitempty"`
}

func (response GetTenantIdApisDistributedtaskPoolsIdAgents200JSONResponse) VisitGetTenantIdApisDistributedtaskPoolsIdAgentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTenantIdApisDistributedtaskPoolsIdAgentsRequestObject struct {
	TenantId TenantId `json:"tenantId"`
	Id       string   `json:"id"`
	Body     *PostTenantIdApisDistributedtaskPoolsIdAgentsJSONRequestBody
}

type PostTenantIdApisDistributedtaskPoolsIdAgentsResponseObject interface {
	VisitPostTenantIdApisDistributedtaskPoolsIdAgentsResponse(w http.ResponseWriter) error
}

type PostTenantIdApisDistributedtaskPoolsIdAgents200JSONResponse struct {
	Authorization *struct {
		AuthorizationUrl *string `json:"authorizationUrl,omitempty"`
		ClientId         *string `json:"clientId,omitempty"`
		PublicKey        *struct {
			Exponent *string `json:"exponent,omitempty"`
			Modulus  *string `json:"modulus,omitempty"`
		} `json:"publicKey,omitempty"`
	} `json:"authorization,omitempty"`
	CreatedOn          *string  `json:"createdOn,omitempty"`
	CurrentParallelism *float32 `json:"currentParallelism,omitempty"`
	DisableUpdate      *bool    `json:"disableUpdate,omitempty"`
	Enabled            *bool    `json:"enabled,omitempty"`
	Ephemeral          *bool    `json:"ephemeral,omitempty"`
	Id                 *float32 `json:"id,omitempty"`
	IsElastic          *bool    `json:"isElastic,omitempty"`
	IsVirtual          *bool    `json:"isVirtual,omitempty"`
	Labels             *[]struct {
		Id   *float32 `json:"id,omitempty"`
		Name *string  `json:"name,omitempty"`
		Type *string  `json:"type,omitempty"`
	} `json:"labels,omitempty"`
	MaxParallelism *float32                `json:"maxParallelism,omitempty"`
	Name           *string                 `json:"name,omitempty"`
	OsDescription  *string                 `json:"osDescription,omitempty"`
	OwningTenant   *map[string]interface{} `json:"owningTenant"`
	Properties     *struct {
		RequireFipsCryptography *struct {
			Type  *string `json:"$type,omitempty"`
			Value *bool   `json:"$value,omitempty"`
		} `json:"RequireFipsCryptography,omitempty"`
		ServerUrl *struct {
			Type  *string `json:"$type,omitempty"`
			Value *string `json:"$value,omitempty"`
		} `json:"ServerUrl,omitempty"`
	} `json:"properties,omitempty"`
	ProvisioningState *string                 `json:"provisioningState,omitempty"`
	QueueName         *string                 `json:"queueName,omitempty"`
	RunnerGroupId     *float32                `json:"runnerGroupId,omitempty"`
	RunnerGroupName   *map[string]interface{} `json:"runnerGroupName"`
	Status            *string                 `json:"status,omitempty"`
	Version           *string                 `json:"version,omitempty"`
}

func (response PostTenantIdApisDistributedtaskPoolsIdAgents200JSONResponse) VisitPostTenantIdApisDistributedtaskPoolsIdAgentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTenantIdApisDistributedtaskPoolsIdMessagesRequestObject struct {
	TenantId TenantId `json:"tenantId"`
	Id       string   `json:"id"`
	Params   GetTenantIdApisDistributedtaskPoolsIdMessagesParams
}

type GetTenantIdApisDistributedtaskPoolsIdMessagesResponseObject interface {
	VisitGetTenantIdApisDistributedtaskPoolsIdMessagesResponse(w http.ResponseWriter) error
}

type GetTenantIdApisDistributedtaskPoolsIdMessages200JSONResponse struct {
	Body        *string `json:"body,omitempty"`
	MessageType *string `json:"messageType,omitempty"`
}

func (response GetTenantIdApisDistributedtaskPoolsIdMessages200JSONResponse) VisitGetTenantIdApisDistributedtaskPoolsIdMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1RequestObject struct {
	TenantId TenantId `json:"tenantId"`
	Id       string   `json:"id"`
	Id1      string   `json:"id1"`
	Params   DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Params
}

type DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1ResponseObject interface {
	VisitDeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Response(w http.ResponseWriter) error
}

type DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1200Response struct {
}

func (response DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1200Response) VisitDeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Response(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostTenantIdApisDistributedtaskPoolsIdSessionsRequestObject struct {
	TenantId TenantId `json:"tenantId"`
	Id       string   `json:"id"`
	Body     *PostTenantIdApisDistributedtaskPoolsIdSessionsJSONRequestBody
}

type PostTenantIdApisDistributedtaskPoolsIdSessionsResponseObject interface {
	VisitPostTenantIdApisDistributedtaskPoolsIdSessionsResponse(w http.ResponseWriter) error
}

type PostTenantIdApisDistributedtaskPoolsIdSessions200JSONResponse struct {
	Agent *struct {
		Ephemeral         *map[string]interface{} `json:"ephemeral"`
		Id                *float32                `json:"id,omitempty"`
		IsVirtual         *bool                   `json:"isVirtual,omitempty"`
		Name              *string                 `json:"name,omitempty"`
		OsDescription     *string                 `json:"osDescription,omitempty"`
		OwningTenant      *map[string]interface{} `json:"owningTenant"`
		ProvisioningState *map[string]interface{} `json:"provisioningState"`
		RunnerGroupId     *map[string]interface{} `json:"runnerGroupId"`
		RunnerGroupName   *map[string]interface{} `json:"runnerGroupName"`
		Status            *float32                `json:"status,omitempty"`
		Version           *string                 `json:"version,omitempty"`
	} `json:"agent,omitempty"`
	EncryptionKey *struct {
		Encrypted *bool   `json:"encrypted,omitempty"`
		Value     *string `json:"value,omitempty"`
	} `json:"encryptionKey,omitempty"`
	OwnerName         *string `json:"ownerName,omitempty"`
	SessionId         *string `json:"sessionId,omitempty"`
	UseFipsEncryption *bool   `json:"useFipsEncryption,omitempty"`
}

func (response PostTenantIdApisDistributedtaskPoolsIdSessions200JSONResponse) VisitPostTenantIdApisDistributedtaskPoolsIdSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTenantIdApisDistributedtaskPoolsIdSessions401JSONResponse struct {
	Id             *string                 `json:"$id,omitempty"`
	ErrorCode      *float32                `json:"errorCode,omitempty"`
	EventId        *float32                `json:"eventId,omitempty"`
	InnerException *map[string]interface{} `json:"innerException"`
	Message        *string                 `json:"message,omitempty"`
	TypeKey        *string                 `json:"typeKey,omitempty"`
	TypeName       *string                 `json:"typeName,omitempty"`
}

func (response PostTenantIdApisDistributedtaskPoolsIdSessions401JSONResponse) VisitPostTenantIdApisDistributedtaskPoolsIdSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdRequestObject struct {
	TenantId  TenantId `json:"tenantId"`
	Id        string   `json:"id"`
	SessionId string   `json:"sessionId"`
}

type DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdResponseObject interface {
	VisitDeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdResponse(w http.ResponseWriter) error
}

type DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionId200Response struct {
}

func (response DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionId200Response) VisitDeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /{tenantId}/_apis/connectionData)
	GetTenantIdApisConnectionData(ctx context.Context, request GetTenantIdApisConnectionDataRequestObject) (GetTenantIdApisConnectionDataResponseObject, error)

	// (GET /{tenantId}/_apis/distributedtask/pools)
	GetTenantIdApisDistributedtaskPools(ctx context.Context, request GetTenantIdApisDistributedtaskPoolsRequestObject) (GetTenantIdApisDistributedtaskPoolsResponseObject, error)

	// (GET /{tenantId}/_apis/distributedtask/pools/{id}/agents)
	GetTenantIdApisDistributedtaskPoolsIdAgents(ctx context.Context, request GetTenantIdApisDistributedtaskPoolsIdAgentsRequestObject) (GetTenantIdApisDistributedtaskPoolsIdAgentsResponseObject, error)

	// (POST /{tenantId}/_apis/distributedtask/pools/{id}/agents)
	PostTenantIdApisDistributedtaskPoolsIdAgents(ctx context.Context, request PostTenantIdApisDistributedtaskPoolsIdAgentsRequestObject) (PostTenantIdApisDistributedtaskPoolsIdAgentsResponseObject, error)

	// (GET /{tenantId}/_apis/distributedtask/pools/{id}/messages)
	GetTenantIdApisDistributedtaskPoolsIdMessages(ctx context.Context, request GetTenantIdApisDistributedtaskPoolsIdMessagesRequestObject) (GetTenantIdApisDistributedtaskPoolsIdMessagesResponseObject, error)

	// (DELETE /{tenantId}/_apis/distributedtask/pools/{id}/messages/{id1})
	DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1(ctx context.Context, request DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1RequestObject) (DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1ResponseObject, error)

	// (POST /{tenantId}/_apis/distributedtask/pools/{id}/sessions)
	PostTenantIdApisDistributedtaskPoolsIdSessions(ctx context.Context, request PostTenantIdApisDistributedtaskPoolsIdSessionsRequestObject) (PostTenantIdApisDistributedtaskPoolsIdSessionsResponseObject, error)

	// (DELETE /{tenantId}/_apis/distributedtask/pools/{id}/sessions/{sessionId})
	DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionId(ctx context.Context, request DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdRequestObject) (DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetTenantIdApisConnectionData operation middleware
func (sh *strictHandler) GetTenantIdApisConnectionData(ctx echo.Context, tenantId TenantId, params GetTenantIdApisConnectionDataParams) error {
	var request GetTenantIdApisConnectionDataRequestObject

	request.TenantId = tenantId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTenantIdApisConnectionData(ctx.Request().Context(), request.(GetTenantIdApisConnectionDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTenantIdApisConnectionData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTenantIdApisConnectionDataResponseObject); ok {
		return validResponse.VisitGetTenantIdApisConnectionDataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTenantIdApisDistributedtaskPools operation middleware
func (sh *strictHandler) GetTenantIdApisDistributedtaskPools(ctx echo.Context, tenantId TenantId, params GetTenantIdApisDistributedtaskPoolsParams) error {
	var request GetTenantIdApisDistributedtaskPoolsRequestObject

	request.TenantId = tenantId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTenantIdApisDistributedtaskPools(ctx.Request().Context(), request.(GetTenantIdApisDistributedtaskPoolsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTenantIdApisDistributedtaskPools")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTenantIdApisDistributedtaskPoolsResponseObject); ok {
		return validResponse.VisitGetTenantIdApisDistributedtaskPoolsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTenantIdApisDistributedtaskPoolsIdAgents operation middleware
func (sh *strictHandler) GetTenantIdApisDistributedtaskPoolsIdAgents(ctx echo.Context, tenantId TenantId, id string, params GetTenantIdApisDistributedtaskPoolsIdAgentsParams) error {
	var request GetTenantIdApisDistributedtaskPoolsIdAgentsRequestObject

	request.TenantId = tenantId
	request.Id = id
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTenantIdApisDistributedtaskPoolsIdAgents(ctx.Request().Context(), request.(GetTenantIdApisDistributedtaskPoolsIdAgentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTenantIdApisDistributedtaskPoolsIdAgents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTenantIdApisDistributedtaskPoolsIdAgentsResponseObject); ok {
		return validResponse.VisitGetTenantIdApisDistributedtaskPoolsIdAgentsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTenantIdApisDistributedtaskPoolsIdAgents operation middleware
func (sh *strictHandler) PostTenantIdApisDistributedtaskPoolsIdAgents(ctx echo.Context, tenantId TenantId, id string) error {
	var request PostTenantIdApisDistributedtaskPoolsIdAgentsRequestObject

	request.TenantId = tenantId
	request.Id = id

	var body PostTenantIdApisDistributedtaskPoolsIdAgentsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTenantIdApisDistributedtaskPoolsIdAgents(ctx.Request().Context(), request.(PostTenantIdApisDistributedtaskPoolsIdAgentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTenantIdApisDistributedtaskPoolsIdAgents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTenantIdApisDistributedtaskPoolsIdAgentsResponseObject); ok {
		return validResponse.VisitPostTenantIdApisDistributedtaskPoolsIdAgentsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTenantIdApisDistributedtaskPoolsIdMessages operation middleware
func (sh *strictHandler) GetTenantIdApisDistributedtaskPoolsIdMessages(ctx echo.Context, tenantId TenantId, id string, params GetTenantIdApisDistributedtaskPoolsIdMessagesParams) error {
	var request GetTenantIdApisDistributedtaskPoolsIdMessagesRequestObject

	request.TenantId = tenantId
	request.Id = id
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTenantIdApisDistributedtaskPoolsIdMessages(ctx.Request().Context(), request.(GetTenantIdApisDistributedtaskPoolsIdMessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTenantIdApisDistributedtaskPoolsIdMessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTenantIdApisDistributedtaskPoolsIdMessagesResponseObject); ok {
		return validResponse.VisitGetTenantIdApisDistributedtaskPoolsIdMessagesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1 operation middleware
func (sh *strictHandler) DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1(ctx echo.Context, tenantId TenantId, id string, id1 string, params DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Params) error {
	var request DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1RequestObject

	request.TenantId = tenantId
	request.Id = id
	request.Id1 = id1
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1(ctx.Request().Context(), request.(DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteTenantIdApisDistributedtaskPoolsIdMessagesId1ResponseObject); ok {
		return validResponse.VisitDeleteTenantIdApisDistributedtaskPoolsIdMessagesId1Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTenantIdApisDistributedtaskPoolsIdSessions operation middleware
func (sh *strictHandler) PostTenantIdApisDistributedtaskPoolsIdSessions(ctx echo.Context, tenantId TenantId, id string) error {
	var request PostTenantIdApisDistributedtaskPoolsIdSessionsRequestObject

	request.TenantId = tenantId
	request.Id = id

	var body PostTenantIdApisDistributedtaskPoolsIdSessionsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTenantIdApisDistributedtaskPoolsIdSessions(ctx.Request().Context(), request.(PostTenantIdApisDistributedtaskPoolsIdSessionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTenantIdApisDistributedtaskPoolsIdSessions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTenantIdApisDistributedtaskPoolsIdSessionsResponseObject); ok {
		return validResponse.VisitPostTenantIdApisDistributedtaskPoolsIdSessionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionId operation middleware
func (sh *strictHandler) DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionId(ctx echo.Context, tenantId TenantId, id string, sessionId string) error {
	var request DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdRequestObject

	request.TenantId = tenantId
	request.Id = id
	request.SessionId = sessionId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionId(ctx.Request().Context(), request.(DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdResponseObject); ok {
		return validResponse.VisitDeleteTenantIdApisDistributedtaskPoolsIdSessionsSessionIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
