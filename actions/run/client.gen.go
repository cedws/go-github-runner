// Package run provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package run

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// PostIdAcquirejobJSONBody defines parameters for PostIdAcquirejob.
type PostIdAcquirejobJSONBody struct {
	BillingOwnerId *string `json:"billingOwnerId,omitempty"`
	JobMessageId   *string `json:"jobMessageId,omitempty"`
	RunnerOS       *string `json:"runnerOS,omitempty"`
}

// PostIdCompletejobJSONBody defines parameters for PostIdCompletejob.
type PostIdCompletejobJSONBody struct {
	Annotations    *[]interface{}          `json:"annotations,omitempty"`
	BillingOwnerId *string                 `json:"billingOwnerId,omitempty"`
	Conclusion     *string                 `json:"conclusion,omitempty"`
	JobId          *string                 `json:"jobId,omitempty"`
	Outputs        *map[string]interface{} `json:"outputs,omitempty"`
	PlanId         *string                 `json:"planId,omitempty"`
	StepResults    *[]struct {
		ActionName  *string        `json:"action_name,omitempty"`
		Annotations *[]interface{} `json:"annotations,omitempty"`
		CompletedAt *string        `json:"completed_at,omitempty"`
		Conclusion  *string        `json:"conclusion,omitempty"`
		ExternalId  *string        `json:"external_id,omitempty"`
		Name        *string        `json:"name,omitempty"`
		Number      *float32       `json:"number,omitempty"`
		StartedAt   *string        `json:"started_at,omitempty"`
		Status      *string        `json:"status,omitempty"`
		Type        *string        `json:"type,omitempty"`
	} `json:"stepResults,omitempty"`
	Telemetry *[]struct {
		Message *string `json:"message,omitempty"`
		Type    *string `json:"type,omitempty"`
	} `json:"telemetry,omitempty"`
}

// PostIdRenewjobJSONBody defines parameters for PostIdRenewjob.
type PostIdRenewjobJSONBody struct {
	JobId  *string `json:"jobId,omitempty"`
	PlanId *string `json:"planId,omitempty"`
}

// PostIdAcquirejobJSONRequestBody defines body for PostIdAcquirejob for application/json ContentType.
type PostIdAcquirejobJSONRequestBody PostIdAcquirejobJSONBody

// PostIdCompletejobJSONRequestBody defines body for PostIdCompletejob for application/json ContentType.
type PostIdCompletejobJSONRequestBody PostIdCompletejobJSONBody

// PostIdRenewjobJSONRequestBody defines body for PostIdRenewjob for application/json ContentType.
type PostIdRenewjobJSONRequestBody PostIdRenewjobJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostIdAcquirejobWithBody request with any body
	PostIdAcquirejobWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIdAcquirejob(ctx context.Context, id string, body PostIdAcquirejobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIdCompletejobWithBody request with any body
	PostIdCompletejobWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIdCompletejob(ctx context.Context, id string, body PostIdCompletejobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIdRenewjobWithBody request with any body
	PostIdRenewjobWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIdRenewjob(ctx context.Context, id string, body PostIdRenewjobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostIdAcquirejobWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdAcquirejobRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdAcquirejob(ctx context.Context, id string, body PostIdAcquirejobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdAcquirejobRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdCompletejobWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdCompletejobRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdCompletejob(ctx context.Context, id string, body PostIdCompletejobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdCompletejobRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdRenewjobWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdRenewjobRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdRenewjob(ctx context.Context, id string, body PostIdRenewjobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdRenewjobRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostIdAcquirejobRequest calls the generic PostIdAcquirejob builder with application/json body
func NewPostIdAcquirejobRequest(server string, id string, body PostIdAcquirejobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIdAcquirejobRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostIdAcquirejobRequestWithBody generates requests for PostIdAcquirejob with any type of body
func NewPostIdAcquirejobRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/acquirejob", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIdCompletejobRequest calls the generic PostIdCompletejob builder with application/json body
func NewPostIdCompletejobRequest(server string, id string, body PostIdCompletejobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIdCompletejobRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostIdCompletejobRequestWithBody generates requests for PostIdCompletejob with any type of body
func NewPostIdCompletejobRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/completejob", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIdRenewjobRequest calls the generic PostIdRenewjob builder with application/json body
func NewPostIdRenewjobRequest(server string, id string, body PostIdRenewjobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIdRenewjobRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostIdRenewjobRequestWithBody generates requests for PostIdRenewjob with any type of body
func NewPostIdRenewjobRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/renewjob", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostIdAcquirejobWithBodyWithResponse request with any body
	PostIdAcquirejobWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIdAcquirejobResponse, error)

	PostIdAcquirejobWithResponse(ctx context.Context, id string, body PostIdAcquirejobJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIdAcquirejobResponse, error)

	// PostIdCompletejobWithBodyWithResponse request with any body
	PostIdCompletejobWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIdCompletejobResponse, error)

	PostIdCompletejobWithResponse(ctx context.Context, id string, body PostIdCompletejobJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIdCompletejobResponse, error)

	// PostIdRenewjobWithBodyWithResponse request with any body
	PostIdRenewjobWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIdRenewjobResponse, error)

	PostIdRenewjobWithResponse(ctx context.Context, id string, body PostIdRenewjobJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIdRenewjobResponse, error)
}

type PostIdAcquirejobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		BillingOwnerId *string `json:"billingOwnerId,omitempty"`
		ContextData    *struct {
			Github *struct {
				D *[]struct {
					K *string `json:"k,omitempty"`
					V *string `json:"v,omitempty"`
				} `json:"d,omitempty"`
				T *float32 `json:"t,omitempty"`
			} `json:"github,omitempty"`
			Inputs *struct {
				D *[]interface{} `json:"d,omitempty"`
				T *float32       `json:"t,omitempty"`
			} `json:"inputs,omitempty"`
			Matrix *map[string]interface{} `json:"matrix"`
			Needs  *struct {
				D *[]interface{} `json:"d,omitempty"`
				T *float32       `json:"t,omitempty"`
			} `json:"needs,omitempty"`
			Strategy *struct {
				D *[]struct {
					K *string `json:"k,omitempty"`
					V *bool   `json:"v,omitempty"`
				} `json:"d,omitempty"`
				T *float32 `json:"t,omitempty"`
			} `json:"strategy,omitempty"`
			Vars *struct {
				D *[]interface{} `json:"d,omitempty"`
				T *float32       `json:"t,omitempty"`
			} `json:"vars,omitempty"`
		} `json:"contextData,omitempty"`
		Defaults             *[]interface{}          `json:"defaults,omitempty"`
		EnvironmentVariables *[]interface{}          `json:"environmentVariables,omitempty"`
		FileTable            *[]string               `json:"fileTable,omitempty"`
		JobContainer         *map[string]interface{} `json:"jobContainer"`
		JobDisplayName       *string                 `json:"jobDisplayName,omitempty"`
		JobId                *string                 `json:"jobId,omitempty"`
		JobName              *string                 `json:"jobName,omitempty"`
		JobOutputs           *map[string]interface{} `json:"jobOutputs"`
		JobServiceContainers *map[string]interface{} `json:"jobServiceContainers"`
		LockedUntil          *string                 `json:"lockedUntil,omitempty"`
		Mask                 *[]struct {
			Type  *string `json:"type,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"mask,omitempty"`
		MessageType *string `json:"messageType,omitempty"`
		Plan        *struct {
			ArtifactLocation *string  `json:"artifactLocation,omitempty"`
			ArtifactUri      *string  `json:"artifactUri,omitempty"`
			PlanId           *string  `json:"planId,omitempty"`
			PlanType         *string  `json:"planType,omitempty"`
			Version          *float32 `json:"version,omitempty"`
		} `json:"plan,omitempty"`
		RequestId *float32 `json:"requestId,omitempty"`
		Resources *struct {
			Endpoints *[]struct {
				Authorization *struct {
					Parameters *struct {
						AccessToken *string `json:"AccessToken,omitempty"`
					} `json:"parameters,omitempty"`
					Scheme *string `json:"scheme,omitempty"`
				} `json:"authorization,omitempty"`
				Data *struct {
					CacheServerUrl      *string `json:"CacheServerUrl,omitempty"`
					FeedStreamUrl       *string `json:"FeedStreamUrl,omitempty"`
					GenerateIdTokenUrl  *string `json:"GenerateIdTokenUrl,omitempty"`
					PipelinesServiceUrl *string `json:"PipelinesServiceUrl,omitempty"`
					ResultsServiceUrl   *string `json:"ResultsServiceUrl,omitempty"`
					ServerId            *string `json:"ServerId,omitempty"`
					ServerName          *string `json:"ServerName,omitempty"`
				} `json:"data,omitempty"`
				IsReady  *bool   `json:"isReady,omitempty"`
				IsShared *bool   `json:"isShared,omitempty"`
				Name     *string `json:"name,omitempty"`
				Url      *string `json:"url,omitempty"`
			} `json:"endpoints,omitempty"`
		} `json:"resources,omitempty"`
		Snapshot *map[string]interface{} `json:"snapshot"`
		Steps    *[]struct {
			Condition       *string                 `json:"condition,omitempty"`
			ContextName     *string                 `json:"contextName,omitempty"`
			ContinueOnError *map[string]interface{} `json:"continueOnError"`
			Id              *string                 `json:"id,omitempty"`
			Name            *string                 `json:"name,omitempty"`
			Reference       *struct {
				Name           *string `json:"name,omitempty"`
				Ref            *string `json:"ref,omitempty"`
				RepositoryType *string `json:"repositoryType,omitempty"`
				Type           *string `json:"type,omitempty"`
			} `json:"reference,omitempty"`
			TimeoutInMinutes *map[string]interface{} `json:"timeoutInMinutes"`
			Type             *string                 `json:"type,omitempty"`
		} `json:"steps,omitempty"`
		Timeline *struct {
			ChangeId *float32                `json:"changeId,omitempty"`
			Id       *string                 `json:"id,omitempty"`
			Location *map[string]interface{} `json:"location"`
		} `json:"timeline,omitempty"`
		Variables *map[string]struct {
			IsSecret *bool   `json:"isSecret,omitempty"`
			Value    *string `json:"value,omitempty"`
		} `json:"variables,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostIdAcquirejobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIdAcquirejobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIdCompletejobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIdCompletejobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIdCompletejobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIdRenewjobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		LockedUntil *string `json:"lockedUntil,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostIdRenewjobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIdRenewjobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostIdAcquirejobWithBodyWithResponse request with arbitrary body returning *PostIdAcquirejobResponse
func (c *ClientWithResponses) PostIdAcquirejobWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIdAcquirejobResponse, error) {
	rsp, err := c.PostIdAcquirejobWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIdAcquirejobResponse(rsp)
}

func (c *ClientWithResponses) PostIdAcquirejobWithResponse(ctx context.Context, id string, body PostIdAcquirejobJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIdAcquirejobResponse, error) {
	rsp, err := c.PostIdAcquirejob(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIdAcquirejobResponse(rsp)
}

// PostIdCompletejobWithBodyWithResponse request with arbitrary body returning *PostIdCompletejobResponse
func (c *ClientWithResponses) PostIdCompletejobWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIdCompletejobResponse, error) {
	rsp, err := c.PostIdCompletejobWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIdCompletejobResponse(rsp)
}

func (c *ClientWithResponses) PostIdCompletejobWithResponse(ctx context.Context, id string, body PostIdCompletejobJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIdCompletejobResponse, error) {
	rsp, err := c.PostIdCompletejob(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIdCompletejobResponse(rsp)
}

// PostIdRenewjobWithBodyWithResponse request with arbitrary body returning *PostIdRenewjobResponse
func (c *ClientWithResponses) PostIdRenewjobWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIdRenewjobResponse, error) {
	rsp, err := c.PostIdRenewjobWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIdRenewjobResponse(rsp)
}

func (c *ClientWithResponses) PostIdRenewjobWithResponse(ctx context.Context, id string, body PostIdRenewjobJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIdRenewjobResponse, error) {
	rsp, err := c.PostIdRenewjob(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIdRenewjobResponse(rsp)
}

// ParsePostIdAcquirejobResponse parses an HTTP response from a PostIdAcquirejobWithResponse call
func ParsePostIdAcquirejobResponse(rsp *http.Response) (*PostIdAcquirejobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIdAcquirejobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			BillingOwnerId *string `json:"billingOwnerId,omitempty"`
			ContextData    *struct {
				Github *struct {
					D *[]struct {
						K *string `json:"k,omitempty"`
						V *string `json:"v,omitempty"`
					} `json:"d,omitempty"`
					T *float32 `json:"t,omitempty"`
				} `json:"github,omitempty"`
				Inputs *struct {
					D *[]interface{} `json:"d,omitempty"`
					T *float32       `json:"t,omitempty"`
				} `json:"inputs,omitempty"`
				Matrix *map[string]interface{} `json:"matrix"`
				Needs  *struct {
					D *[]interface{} `json:"d,omitempty"`
					T *float32       `json:"t,omitempty"`
				} `json:"needs,omitempty"`
				Strategy *struct {
					D *[]struct {
						K *string `json:"k,omitempty"`
						V *bool   `json:"v,omitempty"`
					} `json:"d,omitempty"`
					T *float32 `json:"t,omitempty"`
				} `json:"strategy,omitempty"`
				Vars *struct {
					D *[]interface{} `json:"d,omitempty"`
					T *float32       `json:"t,omitempty"`
				} `json:"vars,omitempty"`
			} `json:"contextData,omitempty"`
			Defaults             *[]interface{}          `json:"defaults,omitempty"`
			EnvironmentVariables *[]interface{}          `json:"environmentVariables,omitempty"`
			FileTable            *[]string               `json:"fileTable,omitempty"`
			JobContainer         *map[string]interface{} `json:"jobContainer"`
			JobDisplayName       *string                 `json:"jobDisplayName,omitempty"`
			JobId                *string                 `json:"jobId,omitempty"`
			JobName              *string                 `json:"jobName,omitempty"`
			JobOutputs           *map[string]interface{} `json:"jobOutputs"`
			JobServiceContainers *map[string]interface{} `json:"jobServiceContainers"`
			LockedUntil          *string                 `json:"lockedUntil,omitempty"`
			Mask                 *[]struct {
				Type  *string `json:"type,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"mask,omitempty"`
			MessageType *string `json:"messageType,omitempty"`
			Plan        *struct {
				ArtifactLocation *string  `json:"artifactLocation,omitempty"`
				ArtifactUri      *string  `json:"artifactUri,omitempty"`
				PlanId           *string  `json:"planId,omitempty"`
				PlanType         *string  `json:"planType,omitempty"`
				Version          *float32 `json:"version,omitempty"`
			} `json:"plan,omitempty"`
			RequestId *float32 `json:"requestId,omitempty"`
			Resources *struct {
				Endpoints *[]struct {
					Authorization *struct {
						Parameters *struct {
							AccessToken *string `json:"AccessToken,omitempty"`
						} `json:"parameters,omitempty"`
						Scheme *string `json:"scheme,omitempty"`
					} `json:"authorization,omitempty"`
					Data *struct {
						CacheServerUrl      *string `json:"CacheServerUrl,omitempty"`
						FeedStreamUrl       *string `json:"FeedStreamUrl,omitempty"`
						GenerateIdTokenUrl  *string `json:"GenerateIdTokenUrl,omitempty"`
						PipelinesServiceUrl *string `json:"PipelinesServiceUrl,omitempty"`
						ResultsServiceUrl   *string `json:"ResultsServiceUrl,omitempty"`
						ServerId            *string `json:"ServerId,omitempty"`
						ServerName          *string `json:"ServerName,omitempty"`
					} `json:"data,omitempty"`
					IsReady  *bool   `json:"isReady,omitempty"`
					IsShared *bool   `json:"isShared,omitempty"`
					Name     *string `json:"name,omitempty"`
					Url      *string `json:"url,omitempty"`
				} `json:"endpoints,omitempty"`
			} `json:"resources,omitempty"`
			Snapshot *map[string]interface{} `json:"snapshot"`
			Steps    *[]struct {
				Condition       *string                 `json:"condition,omitempty"`
				ContextName     *string                 `json:"contextName,omitempty"`
				ContinueOnError *map[string]interface{} `json:"continueOnError"`
				Id              *string                 `json:"id,omitempty"`
				Name            *string                 `json:"name,omitempty"`
				Reference       *struct {
					Name           *string `json:"name,omitempty"`
					Ref            *string `json:"ref,omitempty"`
					RepositoryType *string `json:"repositoryType,omitempty"`
					Type           *string `json:"type,omitempty"`
				} `json:"reference,omitempty"`
				TimeoutInMinutes *map[string]interface{} `json:"timeoutInMinutes"`
				Type             *string                 `json:"type,omitempty"`
			} `json:"steps,omitempty"`
			Timeline *struct {
				ChangeId *float32                `json:"changeId,omitempty"`
				Id       *string                 `json:"id,omitempty"`
				Location *map[string]interface{} `json:"location"`
			} `json:"timeline,omitempty"`
			Variables *map[string]struct {
				IsSecret *bool   `json:"isSecret,omitempty"`
				Value    *string `json:"value,omitempty"`
			} `json:"variables,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIdCompletejobResponse parses an HTTP response from a PostIdCompletejobWithResponse call
func ParsePostIdCompletejobResponse(rsp *http.Response) (*PostIdCompletejobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIdCompletejobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostIdRenewjobResponse parses an HTTP response from a PostIdRenewjobWithResponse call
func ParsePostIdRenewjobResponse(rsp *http.Response) (*PostIdRenewjobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIdRenewjobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			LockedUntil *string `json:"lockedUntil,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
